<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GeneGenie.Gedcom</name>
    </assembly>
    <members>
        <member name="T:GeneGenie.Gedcom.Constants">
            <summary>
            General GEDCOM related constants.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Constants.UnknownName">
            <summary>
            The default name for an individual when they have not been given one.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Constants.UnknownNamePart">
            <summary>
            The unknown name part.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Constants.UnknownSoundex">
            <summary>
            The unknown soundex.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Data.StaticDateData">
            <summary>
            Month and period data used for parsing dates from GEDCOM files.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Data.StaticDateData.MonthNames">
            <summary>
            All month names that might come up in GEDCOM date formats, abbreviated, non English as well.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Data.StaticDateData.GedcomDateParseDelimiters">
            <summary>
            Delimiters that are valid for parsing the date parts of a GEDCOM date record.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Data.StaticDateData.PeriodMappings">
             <summary>
             A list of mappings of text prefixes and suffixes to their GEDCOM types.
             Not all of these are valid as many tags come from programmes that do not obey the standards.
             Longer strings that match the start of shorter strings should be listed first (ABT. before ABT).
            
             Of particular note;
              C or CIRCA from BROSKEEP files, C may be due to the date  being set from a baptism / christening, but if that is the
              case estimate is still reasonable to go with.
            
              BROSKEEP seems to be stupid and doesn't make proper use of CAL e.g 'BU.9-6-1825' for a death date means it is really
              the burial date that has just been copied to the death date.
              Same with birth / baptism.
             </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.ChildLinkageStatus">
            <summary>
            Child Linkage Status.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ChildLinkageStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ChildLinkageStatus.Challenged">
            <summary>
            Challenged
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ChildLinkageStatus.Disproven">
            <summary>
            Disproven
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ChildLinkageStatus.Proven">
            <summary>
            Proven
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomAdoptionType">
            <summary>
            GEDCOM Adoption Type.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomAdoptionType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomAdoptionType.Husband">
            <summary>
            Husband
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomAdoptionType.Wife">
            <summary>
            Wife
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomAdoptionType.HusbandAndWife">
            <summary>
            Husband and Wife
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomCertainty">
            <summary>
            Indicates the credibility of a piece of information, based upon its supporting evidence.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCertainty.Unreliable">
            <summary>
            Unreliable
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCertainty.Questionable">
            <summary>
            Questionable
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCertainty.Secondary">
            <summary>
            Secondary
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCertainty.Primary">
            <summary>
            Primary
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCertainty.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomCharset">
            <summary>
            The encoding used for the GEDCOM file.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.Unknown">
            <summary>Reserved default / error value.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.Ansel">
            <summary>ANSEL encoding.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.Ansi">
            <summary>ANSI encoding.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.Ascii">
            <summary>ASCII encoding.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.UTF8">
            <summary>UTF8 encoding.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.UTF16BE">
            <summary>UTF16, Big Endian.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.UTF16LE">
            <summary>UTF16, Little Endian.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.UTF32BE">
            <summary>UTF32, Big Endian.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.UTF32LE">
            <summary>UTF32, Little Endian.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomCharset.Unsupported">
            <summary>Encoding was not found. We should default to unknown at the top instead and report error.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomDatePeriod">
            <summary>
            How accurate is the date and what range does it span?.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Unknown">
            <summary>A default for dates so that none slip in without being explicitly checked.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Exact">
            <summary>A single point in time.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.After">
            <summary>Any point in time after.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Before">
            <summary>Any point in time before.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Between">
            <summary>Any point in time between.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.About">
            <summary>Roughly near the date.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Calculated">
            <summary>Calculated / reverse engineered from another piece of data.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Estimate">
            <summary>An estimated date, likely to be slightly wrong.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Interpretation">
            <summary>What someone thinks the date looks like based on reading old documents.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriod.Range">
            <summary>A date range.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomDatePeriodPosition">
            <summary>When parsing date formats dates can be prefixed but are sometimes suffixed.
            This defines where to look for specific date period indicators.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriodPosition.NotSet">
            <summary>Error state for uninitialised instances.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriodPosition.Prefix">
            <summary>The text denoting the date period is before the dates.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDatePeriodPosition.Suffix">
            <summary>The text denoting the date period is after the dates.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomDateType">
            <summary>
            Calendars recognised in GEDCOM format.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.Gregorian">
            <summary>Gregorian calendar.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.Julian">
            <summary>Julian calendar.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.Hebrew">
            <summary>Hebrew calendar.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.French">
            <summary>French calendar.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.Roman">
            <summary>Roman calendar.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomDateType.Unknown">
            <summary>Unknown calendar.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomErrorState">
            <summary>
            Defines the current error status the parser is in.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.NoError">
            <summary>
            No error has occured
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LevelExpected">
            <summary>
            A level value was expected but not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LevelMissingDelim">
            <summary>
            Delimeter after level not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LevelInvalid">
            <summary>
            The level value is invalid
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.XrefIDMissingDelim">
            <summary>
            Delimeter after XrefID not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.XrefIDTooLong">
            <summary>
            The ID is too long, can be at most 22 characters
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.TagExpected">
            <summary>
            A GEDCOM tag name (or custom tag name) was expected but not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.TagMissingDelimOrTerm">
            <summary>
            Delimeter, or newline after the tag was not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LineValueExpected">
            <summary>
            Value expected but not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LineValueMissingTerm">
            <summary>
            newline after line value not found
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.LineValueInvalid">
            <summary>
            The line value is invalid
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.InvalidDelim">
            <summary>
            Deliminator in GEDCOM is a single space, this error will occur
            when a multi space delimiter is detected
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomErrorState.UnknownError">
            <summary>
            An unknown error has occured while parsing
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomEventType">
            <summary>
            GEDCOM Event Types.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.GenericEvent">
            <summary>
            Generic Event
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.ANUL">
            <summary>
            Annulment
            </summary>
            <remarks>
            Declaring a marriage void from the beginning (never existed).
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CENS_FAM">
            <summary>
            Census
            </summary>
            <remarks>
            The event of the periodic count of the population for a designated locality,
            such as a national or state Census.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.DIV">
            <summary>
            Divorce
            </summary>
            <remarks>
            An event of dissolving a marriage through civil action.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.DIVF">
            <summary>
            Divorce Filed
            </summary>
            <remarks>
            An event of filing for a divorce by a spouse.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.ENGA">
            <summary>
            Engagement
            </summary>
            <remarks>
            An event of recording or announcing an agreement between two people to become married.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.MARB">
            <summary>
            Marriage Bann
            </summary>
            <remarks>
            An event of an official public notice given that two people intend to marry.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.MARC">
            <summary>
            Marriage Contract
            </summary>
            <remarks>
            An event of recording a formal agreement of marriage, including the prenuptial
            agreement in which marriage partners reach agreement about the property rights
            of one or both, securing property to their children.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.MARR">
            <summary>
            Marriage
            </summary>
            <remarks>
            A legal, common-law, or customary event of creating a family unit of a man and a woman as husband and wife.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.MARL">
            <summary>
            Marriage License
            </summary>
            <remarks>
            An event of obtaining a legal license to marry.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.MARS">
            <summary>
            Marriage Settlement
            </summary>
            <remarks>
            An event of creating an agreement between two people contemplating marriage, at which time
            they agree to release or modify property rights that would otherwise arise from the marriage.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.RESI">
            <summary>
            Residence
            </summary>
            <remarks>
            An address or place of residence that a family or individual resided.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.Birth">
            <summary>
            Birth
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CHR">
            <summary>
            Christening
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.DEAT">
            <summary>
            Death
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.BURI">
            <summary>
            Burial
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CREM">
            <summary>
            Cremation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.ADOP">
            <summary>
            Adoption
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.BAPM">
            <summary>
            Baptism
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.BARM">
            <summary>
            Bar Mitzvah
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.BASM">
            <summary>
            Bat Mitzvah
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.BLES">
            <summary>
            Blessing
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CHRA">
            <summary>
            Adult Christening
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CONF">
            <summary>
            Confirmation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.FCOM">
            <summary>
            First Communion
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.ORDN">
            <summary>
            Ordination
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.NATU">
            <summary>
            Naturalization
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.EMIG">
            <summary>
            Emigration
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.IMMI">
            <summary>
            Immigration
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CENS">
            <summary>
            Census
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.PROB">
            <summary>
            Probate
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.WILL">
            <summary>
            Will Creation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.GRAD">
            <summary>
            Graduation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.RETI">
            <summary>
            Retirement
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.GenericFact">
            <summary>
            Generic Fact
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.CASTFact">
            <summary>
            Caste
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.DSCRFact">
            <summary>
            Physical Description
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.EDUCFact">
            <summary>
            Education
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.IDNOFact">
            <summary>
            National ID Number
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.NATIFact">
            <summary>
            National Or Tribal Origin
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.NCHIFact">
            <summary>
            Number of Children
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.NMRFact">
            <summary>
            Number of Marriages
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.OCCUFact">
            <summary>
            Occupation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.PROPFact">
            <summary>
            Possessions
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.RELIFact">
            <summary>
            Religion
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.RESIFact">
            <summary>
            Residence
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.SSNFact">
            <summary>
            Social Security Number
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.TITLFact">
            <summary>
            Nobility Type Title
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomEventType.Custom">
            <summary>
            Custom
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomLineValueType">
            <summary>
            Line values in GEDCOM can either be a pointer to another record, or the data itself.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomLineValueType.NoType">
            <summary>
            No line value
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomLineValueType.PointerType">
            <summary>
            Line value is a pointer to another record
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomLineValueType.DataType">
            <summary>
            Line value is the actual data
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomRecordType">
            <summary>
            GEDCOM Record Types.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.GenericRecord">
            <summary>
            Generic Record
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Family">
            <summary>
            Family
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Individual">
            <summary>
            Individual
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Multimedia">
            <summary>
            Multimedia
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Note">
            <summary>
            Note
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Repository">
            <summary>
            Repository
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Source">
            <summary>
            Source
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Submitter">
            <summary>
            Submitter
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Submission">
            <summary>
            Submission
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Event">
            <summary>
            Event
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.FamilyEvent">
            <summary>
            Family Event
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Place">
            <summary>
            Place
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.SourceCitation">
            <summary>
            Source Citation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.SpouseSealing">
            <summary>
            Latter Day Saints Spouse Sealing record for a married couple.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.FamilyLink">
            <summary>
            Family Link
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Association">
            <summary>
            Association
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.IndividualEvent">
            <summary>
            Individual Event
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Date">
            <summary>
            Date
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.RepositoryCitation">
            <summary>
            Repository Citation
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.CustomRecord">
            <summary>
            Custom Record
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRecordType.Header">
            <summary>
            Header
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomRestrictionNotice">
            <summary>
            GEDCOM Restriction Types.
            </summary>
            <remarks>
            Signifies that access to information has been denied or otherwise restricted.
            </remarks>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRestrictionNotice.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRestrictionNotice.Confidential">
            <summary>
            Confidential
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRestrictionNotice.Locked">
            <summary>
            Locked
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomRestrictionNotice.Privacy">
            <summary>
            Privacy
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomSex">
            <summary>
            The gender / sex of an individual.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.NotSet">
            <summary>The sex of the individual has not been set yet and is equivalent to null.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.Undetermined">
            <summary>Undetermined from available records and not quite sure what the sex is./// </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.Male">
            <summary>The individual is male.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.Female">
            <summary>The individual is female.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.Both">
            <summary>The individual is both male and female.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomSex.Neuter">
            <summary>The individual is neuter.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.GedcomState">
            <summary>
            Defines the parse states for GEDCOM file.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomState.Level">
            <summary>
            Reading the current level
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomState.XrefID">
            <summary>
            Reading the current ID
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomState.Tag">
            <summary>
            Reading the current tag name
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.GedcomState.LineValue">
            <summary>
            Reading the value for the current tag
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.MarriageStartStatus">
            <summary>
            Marriage Start Status.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.MarriageStartStatus.Single">
            <summary>
            Single
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.MarriageStartStatus.Private">
            <summary>
            Private
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.MarriageStartStatus.Partners">
            <summary>
            Partners
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.MarriageStartStatus.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.MarriageStartStatus.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.ParserMessageIds">
            <summary>
            Informational, warnings and error codes for the import.
            Codes;
             001 - 100 - Informational
             101 - 200 - Warnings
             201 - 300 - Errors.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIds.Unknown">
            <summary>So that we don't accidentally default to the first id if not initialised, we use unknown.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIds.InterpretedAsYearRange">
            <summary>We only received a year as input which is ambiguous. Interpreted as a range, the original date was kept.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIds.InterpretedAsMonthRange">
            <summary>We only received a year and date as input which is ambiguous. Interpreted as a range, the original date was kept.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIds.DayOfDateAdjusted">
            <summary>Parsing a date led to an invalid day of the month which was adjusted.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIds.DateIsNotValid">
            <summary>The date could not be turned into a valid date time.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.ParserMessageIdSeverity">
            <summary>
            Severity of the messages logged during import.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIdSeverity.Unknown">
            <summary>So that we don't accidentally default to the first id if not initialised, we use unknown.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIdSeverity.Information">
            <summary>The user can view these, but they should not need to.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIdSeverity.Warning">
            <summary>The user needs to know something and / or make a decision.</summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.ParserMessageIdSeverity.Error">
            <summary>We couldn't automatically import something, the user needs to intervene.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.PedigreeLinkageType">
            <summary>
            Indicates the child-to-family relationship for pedigree navigation purposes.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.Adopted">
            <summary>
            Adopted
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.Birth">
            <summary>
            Biological
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.Foster">
            <summary>
            Foster
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.Sealing">
            <summary>
            Sealing
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.FatherAdopted">
            <summary>
            Father Adopted
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.PedigreeLinkageType.MotherAdopted">
            <summary>
            Mother Adopted
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.SourceMediaType">
            <summary>
            Source Media Type.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Audio">
            <summary>
            Audio
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Book">
            <summary>
            Book
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Card">
            <summary>
            Card
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Electronic">
            <summary>
            Electronic
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Fiche">
            <summary>
            Fiche
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Film">
            <summary>
            Film
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Magazine">
            <summary>
            Magazine
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Manuscript">
            <summary>
            Manuscript
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Map">
            <summary>
            Map
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Newspaper">
            <summary>
            Newspaper
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Photo">
            <summary>
            Photo
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Tombstone">
            <summary>
            Tombstone
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Video">
            <summary>
            Video
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Civil_Registry">
            <summary>
            Civil Registry
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Family_Archive_CD">
            <summary>
            Family Archive CD
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Microfilm">
            <summary>
            Microfilm
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Census">
            <summary>
            Census
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Letter">
            <summary>
            Letter
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Official_Document">
            <summary>
            Official Document
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Microfiche">
            <summary>
            Microfiche
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SourceMediaType.Other">
            <summary>
            Other
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus">
            <summary>
            Status of a spouse sealing at a specific date.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.NotSet">
            <summary>
            Status not set, record should not be output to GEDCOM file.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.CANCELED">
            <summary>
            Canceled and considered invalid.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.COMPLETED">
            <summary>
            Completed but the date is not known.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.EXCLUDED">
            <summary>
            Patron excluded this ordinance from being cleared in this submission.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.DNS">
            <summary>
            This ordinance is not authorized.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.DNS_CAN">
            <summary>
            This ordinance is not authorized, previous sealing cancelled.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.PRE_1970">
            <summary>
            Ordinance is likely completed, another ordinance for this person was converted
            from temple records of work completed before 1970, therefore this ordinance is
            assumed to be complete until all records are converted.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.SUBMITTED">
            <summary>
            Ordinance was previously submitted.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Enums.SpouseSealingDateStatus.UNCLEARED">
            <summary>
            Data for clearing ordinance request was insufficient.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomAddress">
            <summary>
            Stores details of an address.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomAddress"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.AddressLine">
            <summary>
            Gets or sets a complete address as a single line.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.AddressLine1">
            <summary>
            Gets or sets the first line in an address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.AddressLine2">
            <summary>
            Gets or sets the second line in an address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.AddressLine3">
            <summary>
            Gets or sets the third line in an address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.ChangeDate">
            <summary>
            Gets or sets the date the address was changed.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.City">
            <summary>
            Gets or sets the city for the address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Country">
            <summary>
            Gets or sets the country the address is in.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Database">
            <summary>
            Gets or sets the database the address is in.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Email1">
            <summary>
            Gets or sets the main email address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Email2">
            <summary>
            Gets or sets the secondary email address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Email3">
            <summary>
            Gets or sets the tertiary email address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Fax1">
            <summary>
            Gets or sets the main fax number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Fax2">
            <summary>
            Gets or sets the secondary fax number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Fax3">
            <summary>
            Gets or sets the tertiary fax number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Phone1">
            <summary>
            Gets or sets the main phone number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Phone2">
            <summary>
            Gets or sets secondary phone number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Phone3">
            <summary>
            Gets or sets the tertiary phone number.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.PostCode">
            <summary>
            Gets or sets the PostCode / zip code for the address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.State">
            <summary>
            Gets or sets the state or county for the address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Www1">
            <summary>
            Gets or sets the main website URI.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Www2">
            <summary>
            Gets or sets the secondary website URI.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAddress.Www3">
            <summary>
            Gets or sets the tertiary website URI.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.CompareTo(GeneGenie.Gedcom.GedcomAddress)">
            <summary>
            Compares the current and passed-in address to see if they are the same.
            </summary>
            <param name="otherAddress">The address to compare the current instance against.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.CompareTo(System.Object)">
            <summary>
            Compares the current and passed-in address to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.Equals(GeneGenie.Gedcom.GedcomAddress)">
            <summary>
            Compares the current and passed-in address to see if they are the same.
            </summary>
            <param name="otherAddress">The address to compare the current instance against.</param>
            <returns>
            True if they match, False otherwise.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.Equals(System.Object)">
            <summary>
            Compares the current and passed-in address to see if they are the same.
            </summary>
            <param name="obj">The address to compare the current instance against.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Add the GEDCOM 6 XML elements for the data in this object as child
            nodes of the given root.
            </summary>
            <param name="root">
            A <see cref="T:System.Xml.XmlNode"/>.
            </param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAddress.Output(System.IO.TextWriter,System.Int32)">
            <summary>
            Get the GEDCOM 5.5 lines for the data in this object.
            Lines start at the given level.
            </summary>
            <param name="sw">
            A <see cref="T:System.IO.TextWriter"/>.
            </param>
            <param name="level">
            A <see cref="T:System.Int32"/>.
            </param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomAge">
            <summary>
            Used for holding the age of an individual for a given event,
            this is an object rather than it just being a straight forward
            number to allow for vague values to be given, e.g. &lt; 10.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAge.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomAge"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.ChangeDate">
            <summary>
            Gets or sets the date on which the age of an individual changed.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Equality">
            <summary>
            Gets or sets.
            </summary>
            TODO: Docs
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.StillBorn">
            <summary>
            Gets a value indicating whether the individual is considered stillborn.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Infant">
            <summary>
            Gets a value indicating whether the individual is considered an infant.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Child">
            <summary>
            Gets a value indicating whether the individual is considered a child.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Years">
            <summary>
            Gets or sets the year portion of the individual's age.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Months">
            <summary>
            Gets or sets the month portion of the individual's age.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAge.Days">
            <summary>
            Gets or sets the day portion of the individual's age.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAge.Parse(System.String,GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Parses a string for a GEDCOM format date.
            </summary>
            <param name="str">The string to parse.</param>
            <param name="database">The database to associate the result of the parsing with.</param>
            <returns>The parsed age or a null if the date is not recognised.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAge.Output(System.IO.TextWriter,System.Int32)">
            <summary>
            Output GEDCOM formatted text representing the age.
            </summary>
            <param name="tw">The writer to output to.</param>
            <param name="level">The GEDCOM level.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAge.Changed">
            <summary>
            Called after one of the date elements for this instance is changed.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomAssociation">
            <summary>
            How the given individual is associated to another.
            Each GedcomIndividal contains a list of these.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomAssociation"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAssociation.RecordType">
            <summary>
            Gets the record type for an association.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAssociation.GedcomTag">
            <summary>
            Gets the GEDCOM tag for an association.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAssociation.Description">
            <summary>
            Gets or sets the description for this association.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomAssociation.Individual">
            <summary>
            Gets or sets the individual for this association.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.Output(System.IO.TextWriter)">
            <summary>
            Outputs a GEDCOM format version of this instance.
            </summary>
            <param name="tw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user-entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.CompareTo(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.CompareTo(GeneGenie.Gedcom.GedcomAssociation)">
            <summary>
            Compares the current and passed-in association to see if they are the same.
            </summary>
            <param name="other">The association to compare the current instance against.</param>
            <returns>
            A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.Equals(GeneGenie.Gedcom.GedcomAssociation)">
            <summary>
            Compares the current and passed-in association to see if they are the same.
            </summary>
            <param name="other">The association to compare the current instance against.</param>
            <returns>
            True if they match, False otherwise.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.Equals(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomAssociation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomChangeDate">
            <summary>
            The date on which a GEDCOM record was changed.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomChangeDate.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomChangeDate"/> class.
            </summary>
            <param name="database">The GEDCOM database to associate this date with.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomChangeDate.Changed">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomCustomRecord">
            <summary>
            GEDCOM allows for custom tags to be added by applications.
            This is essentially a dummy object.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomCustomRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomCustomRecord"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomCustomRecord.RecordType">
            <inheritdoc/>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomCustomRecord.GedcomTag">
            <inheritdoc/>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomCustomRecord.Tag">
            <summary>
            Gets or sets the tag associated with this custom record.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomCustomRecord.Output(System.IO.TextWriter)">
            <summary>
            Placeholder for GEDCOM output code, does not actually output any data.
            </summary>
            <param name="tw">The writer to output to.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomDatabase">
            <summary>
            The database for all the GEDCOM records.
            This is currently just in memory.  To implement a "real"
            database you should derive from this class and override
            the necessary methods / properties.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomDatabase"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Header">
            <summary>
            Gets or sets the header for a GEDCOM file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Table">
            <summary>
            Gets or sets hashtable of all top level GEDCOM records, key is the XRef.
            Top level records are Individuals, Families, Sources, Repositories, and Media.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Count">
            <summary>
            Gets total number of top level GEDCOM records in the database.
            Top level records are Individuals, Families, Sources, Repositories, and Media.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Current">
            <summary>
            Gets the current GedcomRecord when enumerating the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Individuals">
            <summary>
            Gets a list of all the Individuals in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Families">
            <summary>
            Gets a list of all the Families in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Sources">
            <summary>
            Gets a list of all the sources in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Repositories">
            <summary>
            Gets a list of all the repositories in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Media">
            <summary>
            Gets a list of all the media items in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Notes">
            <summary>
            Gets a list of all the notes in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Submitters">
            <summary>
            Gets a list of all the submitters in the database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Name">
            <summary>
            Gets or sets the name of the database, this is currently the full filename
            of the GEDCOM file the database was read from / saved to,
            but could equally be a connection string for a real backend database.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.NameCollection">
            <summary>
            Gets all the names used in the database, used primarily to save
            memory by storing names only once.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.PlaceNameCollection">
            <summary>
            Gets all the place names used in the database, used primarily to save
            memory by storing names only once.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Surnames">
            <summary>
            Gets or sets utility property providing all the surnames in the database, along with
            a count of how many people have that surname.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Loading">
            <summary>
            Gets or sets a value indicating whether the database is being loaded.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatabase.Item(System.String)">
            <summary>
            Gets or sets the GedcomRecord associated with the given XRef.
            </summary>
            <param name="key">TODO: Doc.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Equals(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal (in contents, not structure) to this instance.
            </summary>
            <param name="gedcomDb">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Add(System.String,GeneGenie.Gedcom.GedcomRecord)">
            <summary>
            Add the given record to the database with the given XRef.
            </summary>
            <param name="xrefID">
            A <see cref="T:System.String"/>.
            </param>
            <param name="record">
            A <see cref="T:GeneGenie.Gedcom.GedcomRecord"/>.
            </param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.BuildSurnameList">
            <summary>
            Builds up the surname list for use with the Surnames property.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Remove(System.String,GeneGenie.Gedcom.GedcomRecord)">
            <summary>
            Remove the given record with the given XRef from the database.
            </summary>
            <param name="xrefID">
            A <see cref="T:System.String"/>.
            </param>
            <param name="record">
            A <see cref="T:GeneGenie.Gedcom.GedcomRecord"/>.
            </param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Contains(System.String)">
            <summary>
            Does the database contain a record with the given XRef.
            </summary>
            <param name="xrefID">
            A <see cref="T:System.String"/>.
            </param>
            <returns>
            A <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            True if the enumerator was successfully advanced to the next element;
            False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.GetEnumerator">
            <summary>
            TODO: Doc.
            </summary>
            <returns>TODO: Doc 2.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.GenerateXref(System.String)">
            <summary>
            Create a new XRef.
            </summary>
            <param name="prefix">
            A <see cref="T:System.String"/>.
            </param>
            <returns>
            A <see cref="T:System.String"/> TODO: Doc.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.Combine(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Combines the given database with this one.
            This is literally what it says, no duplicate removal is performed
            combine will not take place if there are duplicate xrefs.
            </summary>
            <param name="database">
            A <see cref="T:GeneGenie.Gedcom.GedcomDatabase"/>.
            </param>
            <returns>
            A <see cref="T:System.Boolean"/>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDatabase.BuildSurnameList(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Add the given individual to the surnames list.
            </summary>
            <param name="indi">
            A <see cref="T:GeneGenie.Gedcom.GedcomIndividualRecord"/>.
            </param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomDate">
            <summary>
            Defines a date, allowing partial dates, date ranges etc.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomDate"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomDate"/> class.
            </summary>
            <param name="database">The database to associate the date with.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.RecordType">
            <inheritdoc/>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.GedcomTag">
            <inheritdoc/>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.DateType">
            <summary>
            Gets or sets the calendar type.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.DatePeriod">
            <summary>
            Gets or sets the date period.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.Time">
            <summary>
            Gets or sets the time.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.Date1">
            <summary>
            Gets or sets the date, or the first date in a date range.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.DateTime1">
            <summary>
            Gets the DateTime, or the first DateTime in a date range.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.Date2">
            <summary>
            Gets or sets the second date in a date range.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.DateTime2">
            <summary>
            Gets the second DateTime in a date range.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.DateString">
            <summary>
            Gets.
            </summary>
            TODO: Doc
            TODO: cache this value, clear cache when _DatePeriod / _Date1 / _Date2 / _Time change
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDate.Period">
            <summary>
            Gets a text representation of the date period and date.
            TODO: Seems wrongly named, returns original value as well as period.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.op_LessThan(GeneGenie.Gedcom.GedcomDate,GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compare two dates to see if first is greater than the second.
            </summary>
            <param name="a">First date to compare.</param>
            <param name="b">Second date to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.op_GreaterThan(GeneGenie.Gedcom.GedcomDate,GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compare two dates to see if first is less than the second.
            </summary>
            <param name="a">First date to compare.</param>
            <param name="b">Second date to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.op_Inequality(GeneGenie.Gedcom.GedcomDate,GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compare two dates to see if they are not equal.
            </summary>
            <param name="a">First date to compare.</param>
            <param name="b">Second date to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.op_Equality(GeneGenie.Gedcom.GedcomDate,GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compare two dates to see if they are equal.
            </summary>
            <param name="a">First date to compare.</param>
            <param name="b">Second date to compare.</param>
            <returns>bool.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.CompareByDate(GeneGenie.Gedcom.GedcomDate,GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compare two GEDCOM format dates.
            </summary>
            <param name="datea">First date to compare.</param>
            <param name="dateb">Second date to compare.</param>
            <returns>0 if equal, -1 if datea less than dateb, else 1.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.CompareTo(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.CompareTo(GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compares the current and passed-in date to see if they are the same.
            </summary>
            <param name="otherDate">The date to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.Equals(GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Compares the current and passed-in date to see if they are the same.
            </summary>
            <param name="otherDate">The date to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.CalculateSimilarityScore(GeneGenie.Gedcom.GedcomDate)">
            <summary>
            Returns a percentage based score on how similar the passed record is to the current instance.
            </summary>
            <param name="date">The date to compare this instance against.</param>
            <returns>A score from 0 to 100 representing the percentage match.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.ExtractDatePeriod(System.String)">
            <summary>
            Extracts the date period from raw text and attempts to guess if the date period is not present.
            </summary>
            <param name="dataString">The data string.</param>
            <returns>A <see cref="T:GeneGenie.Gedcom.GedcomDatePeriodParseResult"/> object with the period and the text removed from the input string.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.ParseDateString(System.String)">
            <summary>
            Parse passed date into instance properties.
            </summary>
            <param name="inputDate">The date to parse as a text string.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.Output(System.IO.TextWriter)">
            <summary>
            Output GEDCOM format for this instance.
            </summary>
            <param name="tw">Where to output the data to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.CompareNullableDateTime(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Compare two possibly null dates.
            </summary>
            <param name="dateaDate">First date to compare.</param>
            <param name="datebDate">Second date to compare.</param>
            <returns>0 if dates match, -1 if dateaDate is less than datebDate, otherwise 1.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.MatchDateTimes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
            <summary>
            Fuzzy matching of dates. TODO: Unit test coverage, no idea how well this works.
            </summary>
            <param name="dateTimeA">First date to compare.</param>
            <param name="dateTimeB">Second date to compare.</param>
            <returns>Returns a float rather than an int to allow for some fuzziness
            e.g.  10-11-2000 is 10 NOV 2000 or 11 OCT 2000.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.SplitDateString(System.String)">
            <summary>
            Split a date string into parts.
            </summary>
            <param name="dataString">The date to split.</param>
            <returns>Array of strings representing parts of a date.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomDate.GetDateInfo(System.String[],System.Int32,System.Int32,System.Globalization.Calendar,System.String)">
            <summary>
            Get DateTime information from an array representing parts of a date.
            </summary>
            <param name="dateSplit">The parts of a valid date.</param>
            <param name="start">The first element in the array that contains a valid date part.</param>
            <param name="num">The number of elements in the array that contain valid date parts.</param>
            <param name="calendar">The calendar for the given date.</param>
            <param name="inputDate">The original date string, used for feedback to the user if the date cannot be parsed.</param>
            <returns>Return a DateTime if the passed-in values could be parsed into a valid DateTime; otherwise null.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomDatePeriodParseResult">
            <summary>The result of parsing and extracting a date period from a string.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatePeriodParseResult.DataAfterExtraction">
            <summary>Gets or sets the string that shows the parsed data with the date period extracted.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatePeriodParseResult.DatePeriod">
            <summary>Gets or sets the date period that has been parsed from the raw text.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomDatePeriodParserMapping">
            <summary>
            Maps a date / date range indicator from the GEDCOM file to it's enum.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatePeriodParserMapping.MapsTo">
            <summary>Gets or sets the date period that this element maps to.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatePeriodParserMapping.Text">
            <summary>Gets or sets the text that is searched for in the GEDCOM date line.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomDatePeriodParserMapping.TextPosition">
            <summary>Gets or sets the position of the text that is searched for.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomEvent">
            <summary>
            Defines a generic event or fact.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.eventType">
            <summary>
            The GEDCOM event type.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.classification">
            <summary>
            The classification.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.certainty">
            <summary>
            The certainty.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.record">
            <summary>
            The record.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.eventXRefID">
            <summary>
            Used for Gedcom 6 XML output.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.eventName">
            <summary>
            The event name.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.date">
            <summary>
            The date.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.place">
            <summary>
            The place.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.address">
            <summary>
            The address.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.responsibleAgency">
            <summary>
            The responsible agency.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.religiousAffiliation">
            <summary>
            The religious affiliation.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomEvent.cause">
            <summary>
            The cause.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomEvent"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.GedcomTag">
            <summary>
            Gets the gedcom tag.
            </summary>
            <value>
            The gedcom tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.EventName">
            <summary>
            Gets or sets the name of the event.
            </summary>
            <value>
            The name of the event.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Classification">
            <summary>
            Gets or sets the classification.
            </summary>
            <value>
            The classification.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Place">
            <summary>
            Gets or sets the place.
            </summary>
            <value>
            The place.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.ResponsibleAgency">
            <summary>
            Gets or sets the responsible agency.
            </summary>
            <value>
            The responsible agency.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.ReligiousAffiliation">
            <summary>
            Gets or sets the religious affiliation.
            </summary>
            <value>
            The religious affiliation.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Cause">
            <summary>
            Gets or sets the cause.
            </summary>
            <value>
            The cause.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Certainty">
            <summary>
            Gets or sets the certainty.
            </summary>
            <value>
            The certainty.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.EventXRefID">
            <summary>
            Gets or sets the event x reference identifier.
            </summary>
            <value>
            The event x reference identifier.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.Record">
            <summary>
            Gets or sets the record.
            </summary>
            <value>
            The record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomEvent.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.TypeToReadable(GeneGenie.Gedcom.Enums.GedcomEventType)">
            <summary>
            Get the user-friendly textual description for a GedcomEventType.
            </summary>
            <param name="eventType">A GEDCOM event type.</param>
            <returns>
            The textual description for a given GedcomEventType.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.TypeToTag(GeneGenie.Gedcom.Enums.GedcomEventType)">
            <summary>
            Get the tag for a GedcomEventType.
            </summary>
            <param name="eventType">A GEDCOM event type.</param>
            <returns>
            The tag for a given GedcomEventType.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.ReadableToType(System.String)">
            <summary>
            Attempts to determine a standard event type from a textual
            description.  Always returns GenericEvent if one can't be found
            even though where the string came from maybe a FACT.
            </summary>
            <param name="readable">The type name as a string.</param>
            <returns>
            A GedcomEventType matching the textual description, or GenericEvent if no match was found.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.CompareTo(System.Object)">
            <summary>
            Compares two events to see if the date and place are the same.
            </summary>
            <param name="obj">The event instance to compare against.</param>
            <returns>Relative position in the sort order.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.CompareTo(GeneGenie.Gedcom.GedcomEvent)">
            <summary>
            Compares two events to see if the date and place are the same.
            </summary>
            <param name="eventToCompare">The event instance to compare against.</param>
            <returns>Relative position in the sort order.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.CalculateSimilarityScore(GeneGenie.Gedcom.GedcomEvent)">
            <summary>
            Returns a percentage based score on how similar the passed record is to the current instance.
            </summary>
            <param name="ev">The event to compare against this instance.</param>
            <returns>A score from 0 to 100 representing the percentage match.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.Output(System.IO.TextWriter)">
            <summary>
            Outputs the specified sw.
            </summary>
            <param name="sw">The sw.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomEvent.Equals(GeneGenie.Gedcom.GedcomEvent)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomEvent to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomFamilyEvent">
            <summary>
            An event relating to a given family.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomFamilyEvent"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyEvent.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyEvent.HusbandAge">
            <summary>
            Gets or sets the husband age.
            </summary>
            <value>
            The husband age.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyEvent.WifeAge">
            <summary>
            Gets or sets the wife age.
            </summary>
            <value>
            The wife age.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyEvent.FamRecord">
            <summary>
            Gets or sets the family record.
            </summary>
            <value>
            The family record.
            </value>
            <exception cref="T:System.Exception">Must set a GedcomFamilyRecord on a GedcomFamilyEvent.</exception>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyEvent.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyEvent.Output(System.IO.TextWriter)">
            <summary>
            Output GEDCOM format for this family event.
            </summary>
            <param name="sw">Where to output the data to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyEvent.Equals(GeneGenie.Gedcom.GedcomFamilyEvent)">
            <inheritdoc />
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomFamilyLink">
            <summary>
            How an individal is linked to a family.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomFamilyLink"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.Family">
            <summary>
            Gets or sets the family.
            </summary>
            <value>
            The family.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.Individual">
            <summary>
            Gets or sets the individual being linked in this family record.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.Pedigree">
            <summary>
            Gets or sets the pedigree.
            </summary>
            <value>
            The pedigree.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.FatherPedigree">
            <summary>
            Gets or sets the father pedigree.
            </summary>
            <value>
            The father pedigree.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.MotherPedigree">
            <summary>
            Gets or sets the mother pedigree.
            </summary>
            <value>
            The mother pedigree.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.Status">
            <summary>
            Gets or sets the status.
            </summary>
            <value>
            The status.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyLink.PreferedSpouse">
            <summary>
            Gets or sets a value indicating whether [prefered spouse].
            </summary>
            <value>
              <c>true</c> if [prefered spouse]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.IsEquivalentTo(System.Object)">
            <summary>
            Compares the current and passed family link to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.CompareTo(GeneGenie.Gedcom.GedcomFamilyLink)">
            <summary>
            Compares the current and passed family link to see if they are the same.
            </summary>
            <param name="link">The family link to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.CompareTo(System.Object)">
            <summary>
            Compares the current and passed family link to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.Equals(GeneGenie.Gedcom.GedcomFamilyLink)">
            <summary>
            Compares the current and passed family link to see if they are the same.
            </summary>
            <param name="other">The GedcomFamilyLink to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.Equals(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyLink.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomFamilyRecord">
            <summary>
            Defines a family, consisting of husband/wife and children, and
            family events.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomFamilyRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase,GeneGenie.Gedcom.GedcomIndividualRecord,GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomFamilyRecord" /> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
            <param name="indi1">The first individual.</param>
            <param name="indi2">The second individual.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.GedcomTag">
            <summary>
            Gets the gedcom tag for a family record.
            </summary>
            <value>
            The gedcom tag for a family record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.Events">
            <summary>
            Gets the family events.
            </summary>
            <value>
            The family events.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.Husband">
            <summary>
            Gets or sets the husband.
            </summary>
            <value>
            The husband.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.Wife">
            <summary>
            Gets or sets the wife.
            </summary>
            <value>
            The wife.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.Children">
            <summary>
            Gets the children.
            </summary>
            <value>
            The children.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.NumberOfChildren">
            <summary>
            Gets or sets the number of children.
            </summary>
            <value>
            The number of children.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.SubmitterRecords">
            <summary>
            Gets the submitter records.
            </summary>
            <value>
            The submitter records.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.Marriage">
            <summary>
            Gets the marriage.
            </summary>
            <value>
            The marriage.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.StartStatus">
            <summary>
            Gets or sets the start status.
            </summary>
            <value>
            The start status.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.SpouseSealing">
            <summary>
            Gets or sets the spousal sealing record for this family or null if one does not exist.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomFamilyRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.AddNewEvent(GeneGenie.Gedcom.Enums.GedcomEventType)">
            <summary>
            Add a new family event for a given event type.
            </summary>
            <param name="type">The event type.</param>
            <returns>
            The new family event based on the given event type.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.AddChild(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Add a child.
            </summary>
            <param name="indi">The child.</param>
            <returns>
            Returns True if a new child record is added; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.AddNewChild">
            <summary>
            Add a new child.
            </summary>
            <returns>
            The child's record.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.RemoveChild(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Remove a child.
            </summary>
            <param name="child">The child.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.ChangeHusband(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Changes the husband.
            </summary>
            <param name="indi">The husband.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.ChangeWife(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Changes the wife.
            </summary>
            <param name="indi">The wife.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.RemoveHusband(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Removes the husband.
            </summary>
            <param name="indi">The husband.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.RemoveWife(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Removes the wife.
            </summary>
            <param name="indi">The wife.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.ClearLinkageTypes">
            <summary>
            Clears the linkage types.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.SetLinkageType(System.String,GeneGenie.Gedcom.Enums.PedigreeLinkageType)">
            <summary>
            Sets the type of the linkage.
            </summary>
            <param name="childXrefID">The child xref identifier.</param>
            <param name="type">The pedigree linkage type.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.SetLinkageType(System.String,GeneGenie.Gedcom.Enums.PedigreeLinkageType,GeneGenie.Gedcom.Enums.GedcomAdoptionType)">
            <summary>
            Sets the type of the linkage.
            </summary>
            <param name="childXrefID">The child xref identifier.</param>
            <param name="type">The pedigree linkage type.</param>
            <param name="to">The adoption type.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.GetHusbandLinkageType(System.String)">
            <summary>
            Gets the type of the husband linkage.
            </summary>
            <param name="childXrefID">The child xref identifier.</param>
            <returns>
            Pedigree linkage type for husband.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.GetWifeLinkageType(System.String)">
            <summary>
            Gets the type of the wife linkage.
            </summary>
            <param name="childXrefID">The child xref identifier.</param>
            <returns>
            Pedigree linkage type for wife.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.GetLinkageType(System.String)">
            <summary>
            Gets the type of the linkage.
            </summary>
            <param name="childXrefID">The child xref identifier.</param>
            <returns>
            Pedigree linkage type.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.Output(System.IO.TextWriter)">
            <summary>
            Output GEDCOM format for this instance.
            </summary>
            <param name="sw">Where to output the data to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.Equals(GeneGenie.Gedcom.GedcomFamilyRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomFamilyRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.Equals(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomFamilyRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomGenericComparer">
            <summary>
            Compares two objects for equality.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericComparer.SafeCompareOrder``1(``0,``0)">
            <summary>
            Compares two records to see if they are equal.
            Safely handles one or both being null.
            The records must implement IComparable.
            </summary>
            <typeparam name="T">A type that implements IComparable.</typeparam>
            <param name="item1">The first record.</param>
            <param name="item2">The second record.</param>
            <returns>
            Returns an integer that indicates their relative position in the sort order.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericComparer.SafeEqualityCheck``1(``0,``0)">
            <summary>
            Compares two records to see if they are equal.
            Safely handles one or both being null.
            The records must implement IComparable.
            </summary>
            <typeparam name="T">A type that implements IComparable.</typeparam>
            <param name="item1">The first record.</param>
            <param name="item2">The second record.</param>
            <returns>
            Returns an integer that indicates their relative position in the sort order.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomGenericListComparer">
            <summary>
            Compares two lists of objects that inherit from GedcomRecord for equality.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericListComparer.CompareGedcomRecordLists``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two lists of records to see if they are equal.
            Uses the automated record id from the base class for sorting.
            </summary>
            <typeparam name="T">A class that inherits from <see cref="T:GeneGenie.Gedcom.GedcomRecord"/> and implements Equals/GetHashCode.</typeparam>
            <param name="list1">The first list of records.</param>
            <param name="list2">The second list of records.</param>
            <returns>
            True if they match, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericListComparer.CompareLists``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two lists to see if they are equal.
            Relies on the sorting of the generic type used.
            </summary>
            <typeparam name="T">Any old object that can be compared.</typeparam>
            <param name="list1">The first list of records.</param>
            <param name="list2">The second list of records.</param>
            <returns>
            True if they match, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericListComparer.CompareListSortOrders``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two lists of records to see if they are equal.
            The records must implement IComparable and inherit from GedcomRecord.
            </summary>
            <typeparam name="T">A type that inherits from GedcomRecord and implements IComparable.</typeparam>
            <param name="list1">The first list of records.</param>
            <param name="list2">The second list of records.</param>
            <returns>
            Returns an integer that indicates their relative position in the sort order.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomGenericListComparer.CompareListOrder``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.ICollection{``0})">
            <summary>
            Compares two lists of records to see if they are equal.
            The records must implement IComparable.
            </summary>
            <typeparam name="T">A type that implements IComparable.</typeparam>
            <param name="list1">The first list of records.</param>
            <param name="list2">The second list of records.</param>
            <returns>
            Returns an integer that indicates their relative position in the sort order.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomHeader">
            <summary>
            The header from / for a GEDCOM file.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomHeader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomHeader"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
            <exception cref="T:System.Exception">Database can only have one header.</exception>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.ApplicationName">
            <summary>
            Gets or sets the name of the application.
            </summary>
            <value>
            The name of the application.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.ApplicationVersion">
            <summary>
            Gets or sets the application version.
            </summary>
            <value>
            The application version.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.ApplicationSystemId">
            <summary>
            Gets or sets the application system identifier.
            </summary>
            <value>
            The application system identifier.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Corporation">
            <summary>
            Gets or sets the corporation.
            </summary>
            <value>
            The corporation.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.CorporationAddress">
            <summary>
            Gets or sets the corporation address.
            </summary>
            <value>
            The corporation address.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.ContentDescription">
            <summary>
            Gets or sets the content description.
            </summary>
            <value>
            The content description.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.SubmitterXRefID">
            <summary>
            Gets or sets the submitter x reference identifier.
            </summary>
            <value>
            The submitter x reference identifier.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Submitter">
            <summary>
            Gets or sets the submitter.
            </summary>
            <value>
            The submitter.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.TransmissionDate">
            <summary>
            Gets or sets the transmission date.
            </summary>
            <value>
            The transmission date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>
            The copyright.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Language">
            <summary>
            Gets or sets the language.
            </summary>
            <value>
            The language.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.Filename">
            <summary>
            Gets or sets the filename.
            </summary>
            <value>
            The filename.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.SourceName">
            <summary>
            Gets or sets the name of the source.
            </summary>
            <value>
            The name of the source.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.SourceDate">
            <summary>
            Gets or sets the source date.
            </summary>
            <value>
            The source date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.SourceCopyright">
            <summary>
            Gets or sets the source copyright.
            </summary>
            <value>
            The source copyright.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomHeader.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomHeader.Output(System.IO.TextWriter)">
            <summary>
            Output GEDCOM format for this instance.
            </summary>
            <param name="sw">Where to output the data to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomHeader.IsEquivalentTo(System.Object)">
            <summary>
            Checks if the passed header is equal in terms of user content to the current instance.
            If new fields are added to the header they should also be added in here for comparison.
            </summary>
            <param name="obj">The object to compare against this instance.</param>
            <returns>Returns true if headers match in user entered content, otherwise false.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomHeader.Equals(GeneGenie.Gedcom.GedcomHeader)">
            <summary>
            Checks if the passed header is equal in terms of user content to the current instance.
            If new fields are added to the header they should also be added in here for comparison.
            </summary>
            <param name="other">The GedcomHeader to compare against this instance.</param>
            <returns>Returns true if headers match in user entered content, otherwise false.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomHeader.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomIndividualEvent">
            <summary>
            An event relating to a given individual.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomIndividualEvent"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.Age">
            <summary>
            Gets or sets the age.
            </summary>
            <value>
            The age.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.Famc">
            <summary>
            Gets or sets the family in which an individual appears as a child.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.AdoptedBy">
            <summary>
            Gets or sets the adoption type.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.IndiRecord">
            <summary>
            Gets or sets the individual's record.
            </summary>
            <exception cref="T:System.Exception">Must set a GedcomIndividualRecord on a GedcomIndividualEvent.</exception>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualEvent.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualEvent.Output(System.IO.TextWriter)">
            <summary>
            Output GEDCOM format for this instance.
            </summary>
            <param name="sw">Where to output the data to.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomIndividualRecord">
            <summary>
            Details about a given individual.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomIndividualRecord.ancestralFileNumber">
            <summary>
            The ancestral file number.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomIndividualRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomIndividualRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomIndividualRecord" /> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
            <param name="surname">The surname.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Custom">
            <summary>Gets or sets the list of <see cref="T:GeneGenie.Gedcom.GedcomCustomRecord"/> entries found when parsing an individual.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for an individual.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Names">
            <summary>
            Gets the individual's names.
            </summary>
            <value>
            The names of the individual.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.SexChar">
            <summary>
            Gets a single letter representing the individual's gender.
            </summary>
            <value>
            The gender character.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Sex">
            <summary>
            Gets or sets the sex.
            </summary>
            <value>
            The sex.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Events">
            <summary>
            Gets the events.
            </summary>
            <value>
            The events.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Attributes">
            <summary>
            Gets the list of events.
            </summary>
            <value>
            The list of events.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.ChildIn">
            <summary>
            Gets the child in.
            </summary>
            <value>
            The child in.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.SpouseIn">
            <summary>
            Gets the spouse in.
            </summary>
            <value>
            The spouse in.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.SubmitterRecords">
            <summary>
            Gets the submitter records.
            </summary>
            <value>
            The submitter records.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Associations">
            <summary>
            Gets this individual's associations to others.
            </summary>
            <value>
            The associations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Alia">
            <summary>
            Gets the list of aliases.
            </summary>
            <value>
            The list of aliases.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Anci">
            <summary>
            Gets the anci.
            </summary>
            <value>
            The anci.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Desi">
            <summary>
            Gets the desi.
            </summary>
            <value>
            The desi.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.PermanentRecordFileNumber">
            <summary>
            Gets or sets the permanent record file number.
            </summary>
            <value>
            The permanent record file number.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.AncestralFileNumber">
            <summary>
            Gets or sets the ancestral file number.
            </summary>
            <value>
            The ancestral file number.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Address">
            <summary>
            Gets or sets the address.
            This is a hack,  not according to the spec, but Family Tree Maker sticks
            an address under an individual.
            GedcomRecordReader will build the address up here, then create a RESI record from it.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Birth">
            <summary>
            Gets the birth.
            </summary>
            <value>
            The birth.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Death">
            <summary>
            Gets the death.
            </summary>
            <value>
            The death.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Height">
            <summary>
            Gets the height.
            </summary>
            <value>
            The height.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Weight">
            <summary>
            Gets the weight.
            </summary>
            <value>
            The weight.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Medical">
            <summary>
            Gets the medical event.
            </summary>
            <value>
            The medical event.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.Dead">
            <summary>
            Gets a value indicating whether this <see cref="T:GeneGenie.Gedcom.GedcomIndividualRecord"/> is dead.
            </summary>
            <value>
              <c>true</c> if dead; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomIndividualRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compares the current and passed individual to see if they are the same.
            Compares using user submitted data, not the internal ids which may change.
            </summary>
            <param name="obj">The object to compare the current individual instance against.</param>
            <returns>True if they match, false otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.CompareTo(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Compares the current and passed individual to see if they are the same.
            Compares using user submitted data, not the internal ids which may change.
            </summary>
            <param name="individual">The individual to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.CompareTo(System.Object)">
            <summary>
            Compares the current individual against the passed individual to see if they are
            essentially the same. Compares the content, not the structure.
            For example, names are compared but internal xref ids are not.
            </summary>
            <param name="individual">The second person to compare against.</param>
            <returns>TODO: Doc.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.Equals(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Compares the current and passed individual to see if they are the same.
            Compares using user submitted data, not the internal ids which may change.
            </summary>
            <param name="other">The other individual to compare the current individual against.</param>
            <returns>True if they match, false otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.GetName">
            <summary>
            Gets the preferred name (if set) or the first name if no preferred name is set.
            </summary>
            <returns>A GedcomName or null if no names found.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.SetPreferedName(GeneGenie.Gedcom.GedcomName)">
            <summary>
            Sets the name of the prefered.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.SpouseInFamily(System.String)">
            <summary>
            Determine whether a spouse is in the family.
            </summary>
            <param name="family">The family.</param>
            <returns>
            True if spouse is in the family; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.SpouseInFamily(System.String,GeneGenie.Gedcom.GedcomFamilyLink@)">
            <summary>
            Determine whether a spouse is in the family.
            </summary>
            <param name="family">The family.</param>
            <param name="famLink">The family link.</param>
            <returns>
            True if spouse is in the family; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.ChildInFamily(System.String)">
            <summary>
            Determine whether a child is in the family.
            </summary>
            <param name="family">The family.</param>
            <returns>
            True if child is in the family; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.ChildInFamily(System.String,GeneGenie.Gedcom.GedcomFamilyLink@)">
            <summary>
            Determines whether a child is in the family.
            </summary>
            <param name="family">The family.</param>
            <param name="famLink">The fam link.</param>
            <returns>
            True if child is in the family; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.GetFamily">
            <summary>
            Gets the family.
            </summary>
            <returns>
            Family.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.SetPreferedSpouse(System.String)">
            <summary>
            Sets the preferred spouse.
            </summary>
            <param name="xrefID">The xref identifier.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.FindEvent(GeneGenie.Gedcom.Enums.GedcomEventType)">
            <summary>
            Finds the event.
            </summary>
            <param name="eventType">Type of the event.</param>
            <returns>
            The event if found; otherwise null.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.MatchSurname(System.String,System.Boolean)">
            <summary>
            Matches the surname.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="soundex">if set to <c>true</c> [soundex].</param>
            <returns>
            True if the surname starts with prefix; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.MatchFirstname(System.String,System.Boolean)">
            <summary>
            Matches the firstname.
            </summary>
            <param name="prefix">The prefix.</param>
            <param name="soundex">if set to <c>true</c> [soundex].</param>
            <returns>
            True if the firstname starts with prefix; otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.CalculateSimilarityScore(GeneGenie.Gedcom.GedcomIndividualRecord)">
            <summary>
            Determines whether the passed individual is a match for the current instance
            based on key user entered data.
            </summary>
            <param name="individual">The individual to compare this instance against.</param>
            <returns>A score from 0 to 100 representing the percentage match.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.GetAllChildren">
            <summary>
            Gets a "fake" family record that contains all of this individual's children.
            The record will only contain children.
            </summary>
            <returns>
            A <see cref="T:GeneGenie.Gedcom.GedcomFamilyRecord"/>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomIndividualRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance of an individual as a GEDCOM record.
            </summary>
            <param name="tw">The textwriter to output to.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomMultimediaFile">
            <summary>
            A multimedia file.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomMultimediaFile"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaFile.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaFile.Filename">
            <summary>
            Gets or sets the filename.
            </summary>
            <value>
            The filename.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaFile.Format">
            <summary>
            Gets or sets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaFile.SourceMediaType">
            <summary>
            Gets or sets the type of the source media.
            </summary>
            <value>
            The type of the source media.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaFile.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.CompareTo(System.Object)">
            <summary>
            Compares an object to this GedcomMultimediaFile to determine sort order.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>Returns a value determine the sort order of the compared objects.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.CompareTo(GeneGenie.Gedcom.GedcomMultimediaFile)">
            <summary>
            Compares two GedcomMultimediaFile instances to determine sort order.
            </summary>
            <param name="other">The GedcomMultimediaFile to compare to the current instance.</param>
            <returns>Returns a value determine the sort order of the compared GedcomMultimediaFile objects.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.Equals(GeneGenie.Gedcom.GedcomMultimediaFile)">
            <summary>
            Compares two instances of GedcomMultimediaFile to determine equality.
            </summary>
            <param name="other">The GedcomMultimediaFile to compare to the current instance.</param>
            <returns>True if equal, otherwise False.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.Equals(System.Object)">
            <summary>
            Compares an object to this GedcomMultimediaFile to determine equality.
            </summary>
            <param name="obj">The object to compare to the current instance.</param>
            <returns>True if equal, otherwise False.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaFile.Changed">
            <summary>
            Updates the change date and time.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomMultimediaRecord">
            <summary>
            A multimedia record, this can consist of any number of files
            of varying types.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomMultimediaRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomMultimediaRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a multimedia record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaRecord.Files">
            <summary>
            Gets the multimedia files.
            </summary>
            <value>
            The multimedia files.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaRecord.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomMultimediaRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.CompareByTitle(GeneGenie.Gedcom.GedcomMultimediaRecord,GeneGenie.Gedcom.GedcomMultimediaRecord)">
            <summary>
            Compares the two passed records by title.
            </summary>
            <param name="mediaA">The first multimedia record.</param>
            <param name="mediaB">The second multimedia record.</param>
            <returns>
            &lt;0 if the first record's title precedes the second in the sort order;
            &gt;0 if the second record's title precedes the first;
            0 if the titles are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.AddMultimediaFile(System.String)">
            <summary>
            Adds the multimedia file.
            </summary>
            <param name="filename">The filename.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.Equals(GeneGenie.Gedcom.GedcomMultimediaRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomMultimediaRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.Equals(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomMultimediaRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomName">
            <summary>
            A name for a given individual, allowing different variations to be
            stored.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomName"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.GedcomTag">
            <summary>
            Gets the GEDCOM tag.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <value>
            The type.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.PhoneticVariations">
            <summary>
            Gets the phonetic variations.
            </summary>
            <value>
            The phonetic variations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.RomanizedVariations">
            <summary>
            Gets the romanized variations.
            </summary>
            <value>
            The romanized variations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Surname">
            <summary>
            Gets or sets the surname.
            </summary>
            <value>
            The surname.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.SurnameSoundex">
            <summary>
            Gets the surname soundex.
            </summary>
            <value>
            The surname soundex.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.FirstnameSoundex">
            <summary>
            Gets the firstname soundex.
            </summary>
            <value>
            The firstname soundex.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Prefix">
            <summary>
            Gets or sets the prefix.
            </summary>
            <value>
            The prefix.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Given">
            <summary>
            Gets or sets the given.
            </summary>
            <value>
            The given.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.SurnamePrefix">
            <summary>
            Gets or sets the surname prefix.
            </summary>
            <value>
            The surname prefix.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Suffix">
            <summary>
            Gets or sets the suffix.
            </summary>
            <value>
            The suffix.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.Nick">
            <summary>
            Gets or sets the nick.
            </summary>
            <value>
            The nick.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomName.PreferredName">
            <summary>
            Gets or sets a value indicating whether this is the individuals preferred name.
            </summary>
            <value>
              <c>true</c> if [preferred name]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.CompareTo(GeneGenie.Gedcom.GedcomName)">
            <summary>
            Compares two GedcomName instances by using the full name.
            </summary>
            <param name="other">The name to compare against this instance.</param>
            <returns>An integer specifying the relative sort order.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.CompareTo(System.Object)">
            <summary>
            Compares two GedcomName instances by using the full name.
            </summary>
            <param name="obj">The name to compare against this instance.</param>
            <returns>An integer specifying the relative sort order.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.Equals(GeneGenie.Gedcom.GedcomName)">
            <summary>
            Compare the user-entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomName to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user-entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.CalculateSimilarityScore(GeneGenie.Gedcom.GedcomName)">
            <summary>
            Returns a percentage based score on how similar the passed record is to the current instance.
            </summary>
            <param name="name">The event to compare against this instance.</param>
            <returns>A score from 0 to 100 representing the percentage match.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomName.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomNoteRecord">
            <summary>
            GEDCOM Note Record.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomNoteRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomNoteRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomNoteRecord.ParsedText">
            <summary>
            Gets or sets the parsed text. HACK.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomNoteRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomNoteRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a note record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomNoteRecord.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomNoteRecord.Equals(GeneGenie.Gedcom.GedcomNoteRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomNoteRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomParserMessage">
            <summary>
            A message generated by the GEDCOM file parsing process to provide feedback to the user on warnings, errors and information.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomParserMessage.#ctor(GeneGenie.Gedcom.Enums.ParserMessageIds,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomParserMessage"/> class.
            </summary>
            <param name="messageId">The message identifier, from the master list of enums.</param>
            <param name="additional">A bunch of context parameters that are relevant to this message id.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomParserMessage.AdditionalData">
            <summary>
            Gets the additional data that was logged with the message for context.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomParserMessage.MessageId">
            <summary>
            Gets or sets the message id uniquely identifying where this message was generated from in code.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomParserMessage.Severity">
            <summary>
            Gets the severity of the message. This is fixed here for now as it is very simple.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomPlace">
            <summary>
            Represents a place or location.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomPlace"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a place.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.Form">
            <summary>
            Gets or sets the form.
            </summary>
            <value>
            The form.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.PhoneticVariations">
            <summary>
            Gets the phonetic variations.
            </summary>
            <value>
            The phonetic variations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.RomanizedVariations">
            <summary>
            Gets the romanized variations.
            </summary>
            <value>
            The romanized variations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.Latitude">
            <summary>
            Gets or sets the latitude.
            </summary>
            <value>
            The latitude.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.Longitude">
            <summary>
            Gets or sets the longitude.
            </summary>
            <value>
            The longitude.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomPlace.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.Equals(GeneGenie.Gedcom.GedcomPlace)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomPlace to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.CompareTo(GeneGenie.Gedcom.GedcomPlace)">
            <summary>
            Compares this place record to another record.
            </summary>
            <param name="place">A place record.</param>
            <returns>
            &lt;0 if the this record precedes the other in the sort order;
            &gt;0 if the other record precedes this one;
            0 if the records are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomPlace.CompareTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The GedcomRepositoryRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise False.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomRecord">
            <summary>
            GEDCOM Record.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.level">
            <summary>
            The level.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.userReferenceNumber">
            <summary>
            The user reference number.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.userReferenceType">
            <summary>
            The user reference type.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.automatedRecordId">
            <summary>
            The automated record identifier.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.changeDate">
            <summary>
            The change date.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.notes">
            <summary>
            The notes.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.multimedia">
            <summary>
            The multimedia.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomRecord.sources">
            <summary>
            The sources.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomRecord"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.Database">
            <summary>
            Gets or sets a backpointer to know which database this record is in.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.XrefId">
            <summary>
            Gets or sets the xref identifier.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.Level">
            <summary>
            Gets or sets the level.
            </summary>
            <value>
            The level.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.ParsingLevel">
            <summary>
            Gets or sets the parsing level.
            When we are removing inline note records etc. the new
            record is set to level 0, this breaks the parsing mechanism,
            so we need to record the level the record used to occur on
            TODO: this is a bit of a hack as it adds parsing related code to non
            parsing data.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.XRefID">
            <summary>
            Gets or sets the x reference identifier.
            </summary>
            <value>
            The x reference identifier.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.UserReferenceNumber">
            <summary>
            Gets or sets the user reference number.
            </summary>
            <value>
            The user reference number.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.UserReferenceType">
            <summary>
            Gets or sets the type of the user reference.
            </summary>
            <value>
            The type of the user reference.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.AutomatedRecordId">
            <summary>
            Gets or sets the automated record identifier.
            </summary>
            <value>
            The automated record identifier.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
            <exception cref="T:System.Exception">MISSING DATABASE: " + this.RecordType.ToString().</exception>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.Notes">
            <summary>
            Gets a list of cross references to notes for this record.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.Multimedia">
            <summary>
            Gets the multimedia.
            </summary>
            <value>
            The multimedia.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.Sources">
            <summary>
            Gets the sources.
            </summary>
            <value>
            The sources.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.RefCount">
            <summary>
            Gets or sets the reference count.
            </summary>
            <value>
            The reference count.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.RestrictionNotice">
            <summary>
            Gets or sets the restriction notice.
            </summary>
            <remarks>
            Not standard GEDCOM, but no reason not to put a restriction notice at this level.
            </remarks>
            <value>
            The restriction notice.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecord.ParserMessages">
            <summary>
            Gets the list of informational, warning and error messages generated when parsing this record.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.Delete">
            <summary>
            Deletes this instance.
            </summary>
            <exception cref="T:System.Exception">Ref Count already 0.</exception>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GenerateNoteXML(System.Xml.XmlNode)">
            <summary>
            Generates the note XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GenerateCitationsXML(System.Xml.XmlNode)">
            <summary>
            Generates the citations XML.
            </summary>
            <param name="recNode">The record node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GenerateMultimediaXML(System.Xml.XmlNode)">
            <summary>
            Generates the multimedia XML.
            </summary>
            <param name="recNode">The record node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GenerateChangeDateXML(System.Xml.XmlNode)">
            <summary>
            Generates the change date XML.
            </summary>
            <param name="recNode">The record node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.IsEquivalentTo(System.Object)">
            <summary>
            Must be overridden in derived classes to compare the user entered data for that instance.
            Called from the <see cref="M:GeneGenie.Gedcom.GedcomRecord.Equals(GeneGenie.Gedcom.GedcomRecord)" /> method before it checks common
            data elements (notes, sources etc.).
            We use the word equivalent so that we avoid using the word equals. This is because we are
            checking user entered data only and as far as the end user cares, two records can be equivalent
            (matching) but they might be two different individuals / families etc.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>True if instance matches user data, otherwise False.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.Equals(GeneGenie.Gedcom.GedcomRecord)">
            <summary>
            Compares the inheriting instance user entered data against the passed GedcomRecord.
            If that matches, will then compare the common elements of the passed GedcomRecord
            against this instance (Source etc. which are common to all inheritors).
            </summary>
            <param name="obj">The GedcomRecord to compare against.</param>
            <returns>True if the core base properties match, otherwise False.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.SplitText(System.IO.StreamWriter,System.String,System.Int32)">
            <summary>
            Splits the text.
            </summary>
            <param name="sw">The streamwriter.</param>
            <param name="line">The line.</param>
            <param name="level">The level.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.AddParserMessage(GeneGenie.Gedcom.Enums.ParserMessageIds,System.Object[])">
            <summary>
            Adds a warning, information or error message for the user to review after parsing.
            </summary>
            <param name="warningId">The warning identifier.</param>
            <param name="additional">An array of additional data for context on the error.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.ListChanged(System.Object,System.EventArgs)">
            <summary>
            Update the GedcomChangeDate for this record.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.EventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.Changed">
            <summary>
            Update the GedcomChangeDate for this record.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.SplitText(System.IO.StreamWriter,System.String)">
            <summary>
            Splits the text.
            </summary>
            <param name="sw">The stream writer.</param>
            <param name="line">The line.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecord.OutputStandard(System.IO.TextWriter)">
            <summary>
            Outputs the standard.
            </summary>
            <param name="sw">The writer.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomRecordedEvent">
            <summary>
            TODO: Doc.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomRecordedEvent"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecordedEvent.ChangeDate">
            <summary>
            Gets or sets the date that this record was changed.
            </summary>
            <value>
            The date of the change.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecordedEvent.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecordedEvent.Types">
            <summary>
            Gets or sets the types.
            </summary>
            <value>
            The types.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecordedEvent.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRecordedEvent.Place">
            <summary>
            Gets or sets the place.
            </summary>
            <value>
            The place.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.CompareTo(GeneGenie.Gedcom.GedcomRecordedEvent)">
            <summary>
            Compares this event to another record.
            </summary>
            <param name="other">A recorded event.</param>
            <returns>
            &lt;0 if the first event precedes the second in the sort order;
            &gt;0 if the second event precedes the first;
            0 if the events are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.CompareTo(System.Object)">
            <summary>
            Compares this event to another record.
            </summary>
            <param name="obj">A recorded event.</param>
            <returns>
            &lt;0 if the first event precedes the second in the sort order;
            &gt;0 if the second event precedes the first;
            0 if the events are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.Equals(GeneGenie.Gedcom.GedcomRecordedEvent)">
            <summary>
            Compare the GedcomRecordedEvent against the passed instance for similarity.
            </summary>
            <param name="other">The other instance to compare this instance against.</param>
            <returns>
            True if other instance matches this instance, otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.Equals(System.Object)">
            <summary>
            Compare the GedcomRecordedEvent against the passed instance for similarity.
            </summary>
            <param name="obj">The other instance to compare this instance against.</param>
            <returns>
            True if other instance matches this instance, otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordedEvent.Changed">
            <summary>
            Updates the changed date and time.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomRecordList`1">
            <summary>
            TODO: Doc + i think we might be able to use an ObservableList instead.
            </summary>
            <typeparam name="T">TODO: Not sure what uses this yet.</typeparam>
            <seealso cref="T:System.Collections.Generic.List`1" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRecordList`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomRepositoryCitation">
            <summary>
            TODO: Doc.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomRepositoryCitation"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a repository citation.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.Repository">
            <summary>
            Gets or sets the repository.
            </summary>
            <value>
            The repository.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.CallNumbers">
            <summary>
            Gets the call numbers.
            </summary>
            <value>
            The call numbers.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.MediaTypes">
            <summary>
            Gets the media types.
            </summary>
            <value>
            The media types.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryCitation.OtherMediaTypes">
            <summary>
            Gets or sets the other media types.
            </summary>
            <value>
            The other media types.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.GenerateXML(System.Xml.XmlNode,System.Int32)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root.</param>
            <param name="num">The number.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.Output(System.IO.TextWriter)">
            <summary>
            Outputs this repository citation as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.Equals(GeneGenie.Gedcom.GedcomRepositoryCitation)">
            <inheritdoc />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.Equals(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryCitation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomRepositoryRecord">
            <summary>
            An institution or person that has the specified item as part of their collection(s).
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomRepositoryRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomRepositoryRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a repository record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.Citations">
            <summary>
            Gets the citations.
            </summary>
            <value>
            The citations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomRepositoryRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.CompareByName(GeneGenie.Gedcom.GedcomRepositoryRecord,GeneGenie.Gedcom.GedcomRepositoryRecord)">
            <summary>
            Compares the names of the passed records.
            </summary>
            <param name="repoA">The first repository record.</param>
            <param name="repoB">The second repository record.</param>
            <returns>
            &lt;0 if the first record's name precedes the second in the sort order;
            &gt;0 if the second record's name precedes the first;
            0 if the names are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.CompareTo(System.Object)">
            <summary>
            Compares this repository record to another record.
            </summary>
            <param name="repoB">A repository record.</param>
            <returns>
            &lt;0 if this record precedes the other in the sort order;
            &gt;0 if the other record precedes this one;
            0 if the records are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this repository record as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise False.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.CompareTo(GeneGenie.Gedcom.GedcomRepositoryRecord)">
            <summary>
            Compares this repository record to another record.
            </summary>
            <param name="other">A repository record.</param>
            <returns>
            &lt;0 if this record precedes the other in the sort order;
            &gt;0 if the other record precedes this one;
            0 if the records are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomRepositoryRecord.Equals(GeneGenie.Gedcom.GedcomRepositoryRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomRepositoryRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise False.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomSourceCitation">
            <summary>
            TODO: Doc.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSourceCitation"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.ParsedText">
            <summary>
            Gets or sets the parsed text. HACK.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a source citation.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Source">
            <summary>
            Gets or sets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Page">
            <summary>
            Gets or sets the page.
            </summary>
            <value>
            The page.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.EventType">
            <summary>
            Gets or sets the type of the event.
            </summary>
            <value>
            The type of the event.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Role">
            <summary>
            Gets or sets the role.
            </summary>
            <value>
            The role.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Certainty">
            <summary>
            Gets or sets the certainty.
            </summary>
            <value>
            The certainty.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Date">
            <summary>
            Gets or sets the date.
            </summary>
            <value>
            The date.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceCitation.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.Output(System.IO.TextWriter)">
            <summary>
            Outputs this source citation as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.Equals(GeneGenie.Gedcom.GedcomSourceCitation)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomSourceCitation to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.Equals(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.CompareTo(GeneGenie.Gedcom.GedcomSourceCitation)">
            <summary>
            Compares another source citation to the current instance.
            </summary>
            <param name="citation">A citation.</param>
            <returns>
            &lt;0 if this citation precedes the other in the sort order;
            &gt;0 if the other citation precedes this one;
            0 if the citations are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.CompareTo(System.Object)">
            <summary>
            Compares another object to the current instance.
            </summary>
            <param name="obj">A citation.</param>
            <returns>
            &lt;0 if this object precedes the other in the sort order;
            &gt;0 if the other object precedes this one;
            0 if the objects are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceCitation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomSourceRecord">
            <summary>
            TODO: Doc.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
            <seealso cref="T:System.IComparable" />
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.eventsRecorded">
            <summary>
            The events recorded.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.agency">
            <summary>
            The agency.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.dataNotes">
            <summary>
            The data notes.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.originator">
            <summary>
            The originator.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.title">
            <summary>
            The title.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.filedBy">
            <summary>
            The filed by.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.publicationFacts">
            <summary>
            The publication facts.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.text">
            <summary>
            The text.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.repositoryCitations">
            <summary>
            The repository citations.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSourceRecord.citations">
            <summary>
            The citations.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSourceRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSourceRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.OriginatorText">
            <summary>
            Gets or sets the originator text. HACK.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.TitleText">
            <summary>
            Gets or sets the title text.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.PublicationText">
            <summary>
            Gets or sets the publication text.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.TextText">
            <summary>
            Gets or sets the text text. TODO: What?.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a source record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.EventsRecorded">
            <summary>
            Gets the events recorded.
            </summary>
            <value>
            The events recorded.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.Agency">
            <summary>
            Gets or sets the agency.
            </summary>
            <value>
            The agency.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.DataNotes">
            <summary>
            Gets the data notes.
            </summary>
            <value>
            The data notes.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.Originator">
            <summary>
            Gets or sets the originator.
            </summary>
            <value>
            The originator.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>
            The title.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.FiledBy">
            <summary>
            Gets or sets the filed by.
            </summary>
            <value>
            The filed by.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.PublicationFacts">
            <summary>
            Gets or sets the publication facts.
            </summary>
            <value>
            The publication facts.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.Text">
            <summary>
            Gets or sets the text.
            </summary>
            <value>
            The text.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.RepositoryCitations">
            <summary>
            Gets the repository citations.
            </summary>
            <value>
            The repository citations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.Citations">
            <summary>
            Gets the citations.
            </summary>
            <value>
            The citations.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSourceRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.CompareByTitle(GeneGenie.Gedcom.GedcomSourceRecord,GeneGenie.Gedcom.GedcomSourceRecord)">
            <summary>
            Compares two source records by title.
            </summary>
            <param name="sourceA">The first source record.</param>
            <param name="sourceB">The second source record.</param>
            <returns>
            &lt;0 if the first record's title precedes the second in the sort order;
            &gt;0 if the second record's title precedes the first;
            0 if the titles are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.CompareTo(System.Object)">
            <summary>
            Compares this source record to another record.
            </summary>
            <param name="sourceB">A source record.</param>
            <returns>
            &lt;0 if the first record precedes the second in the sort order;
            &gt;0 if the second record precedes the first;
            0 if the records are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.Delete">
            <summary>
            Deletes this instance.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.GenerateXML(System.Xml.XmlNode)">
            <summary>
            Generates the XML.
            </summary>
            <param name="root">The root node.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this source record as a GEDCOM record.
            </summary>
            <param name="tw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.CompareTo(GeneGenie.Gedcom.GedcomSourceRecord)">
            <summary>
            Compares this source record to another record.
            </summary>
            <param name="other">A source record.</param>
            <returns>
            &lt;0 if the first record precedes the second in the sort order;
            &gt;0 if the second record precedes the first;
            0 if the records are equal.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.Equals(GeneGenie.Gedcom.GedcomSourceRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomSourceRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.Equals(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The GedcomSourceRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSourceRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomSpouseSealingRecord">
            <summary>
            Details the spouse sealing event which can occur between a husband and wife.
            Sealing is a ritual performed by Latter Day Saint temples to seal familial relationships and
            the promise of family relationships throughout eternity.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.date">
            <summary>
            The date that this sealing occurred on.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.description">
            <summary>
            The description for this sealing event.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.place">
            <summary>
            The place at which this sealing occurred.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.status">
            <summary>
            The status of this sealing.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.statusChangeDate">
            <summary>
            The date that the status was last changed.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSpouseSealingRecord.templeCode">
            <summary>
            The temple code.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Date">
            <summary>
            Gets or sets the date that this sealing occurred on.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Description">
            <summary>
            Gets or sets the description for this sealing event.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Place">
            <summary>
            Gets or sets the place that this sealing occurred at.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Status">
            <summary>
            Gets or sets the status of this sealing at a point in time.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.StatusChangeDate">
            <summary>
            Gets or sets the date that the status was last changed.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.TempleCode">
            <summary>
            Gets or sets the temple code.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSpouseSealingRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a spouse sealing record.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Compare(GeneGenie.Gedcom.GedcomSpouseSealingRecord,GeneGenie.Gedcom.GedcomSpouseSealingRecord)">
            <summary>
            Compare two GEDCOM spouse sealing records.
            </summary>
            <param name="recorda">First record to compare.</param>
            <param name="recordb">Second record to compare.</param>
            <returns>0 if equal, -1 if recorda less than recordb, else 1.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.CompareTo(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.CompareTo(GeneGenie.Gedcom.GedcomSpouseSealingRecord)">
            <summary>
            Compares the current and passed-in sealing record to see if they are the same.
            </summary>
            <param name="otherRecord">The sealing record to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Equals(GeneGenie.Gedcom.GedcomSpouseSealingRecord)">
            <summary>
            Compares the current and passed-in sealing record to see if they are the same.
            </summary>
            <param name="otherRecord">The sealing record to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSpouseSealingRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this instance as a GEDCOM record.
            </summary>
            <param name="tw">The writer to output to.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomSubmissionRecord">
            <summary>
            TODO: Doc.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.submitter">
            <summary>
            The submitter.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.familyFile">
            <summary>
            The family file.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.templeCode">
            <summary>
            The temple code.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.generationsOfAncestors">
            <summary>
            The generations of ancestors.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.generationsOfDecendants">
            <summary>
            The generations of decendants.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.GedcomSubmissionRecord.ordinanceProcessFlag">
            <summary>
            The ordinance process flag.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmissionRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSubmissionRecord"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a submission record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.Submitter">
            <summary>
            Gets or sets the submitter.
            </summary>
            <value>
            The submitter.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.FamilyFile">
            <summary>
            Gets or sets the family file.
            </summary>
            <value>
            The family file.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.TempleCode">
            <summary>
            Gets or sets the temple code.
            </summary>
            <value>
            The temple code.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.GenerationsOfAncestors">
            <summary>
            Gets or sets the generations of ancestors.
            </summary>
            <value>
            The generations of ancestors.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.GenerationsOfDecendants">
            <summary>
            Gets or sets the generations of decendants.
            </summary>
            <value>
            The generations of decendants.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmissionRecord.OrdinanceProcessFlag">
            <summary>
            Gets or sets a value indicating whether [ordinance process flag].
            </summary>
            <value>
            <c>true</c> if [ordinance process flag]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmissionRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmissionRecord.Equals(GeneGenie.Gedcom.GedcomSubmissionRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomSubmissionRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomSubmitterRecord">
            <summary>
            An individual or organization who contributes genealogical data to a file or transfers it to someone else.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.GedcomRecord" />
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmitterRecord.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSubmitterRecord"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmitterRecord.#ctor(GeneGenie.Gedcom.GedcomDatabase)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomSubmitterRecord"/> class.
            </summary>
            <param name="database">The database to associate with this record.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.RecordType">
            <summary>
            Gets the type of the record.
            </summary>
            <value>
            The type of the record.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.GedcomTag">
            <summary>
            Gets the GEDCOM tag for a submitter record.
            </summary>
            <value>
            The GEDCOM tag.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.Address">
            <summary>
            Gets or sets the address.
            </summary>
            <value>
            The address.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.LanguagePreferences">
            <summary>
            Gets or sets the language preferences.
            </summary>
            <value>
            The language preferences.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.RegisteredRFN">
            <summary>
            Gets or sets the registered RFN.
            </summary>
            <value>
            The registered RFN.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomSubmitterRecord.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmitterRecord.Output(System.IO.TextWriter)">
            <summary>
            Outputs this submitter record as a GEDCOM record.
            </summary>
            <param name="sw">The writer to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmitterRecord.IsEquivalentTo(System.Object)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="obj">The object to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomSubmitterRecord.Equals(GeneGenie.Gedcom.GedcomSubmitterRecord)">
            <summary>
            Compare the user entered data against the passed instance for similarity.
            </summary>
            <param name="other">The GedcomSubmitterRecord to compare this instance against.</param>
            <returns>
            True if instance matches user data, otherwise false.
            </returns>
        </member>
        <member name="T:GeneGenie.Gedcom.Helpers.GedcomTagLevel">
            <summary>
            Used by a stack to store a tag and level for tracking the parsing process.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Helpers.GedcomTagLevel.Name">
            <summary>Gets or sets the current tag name.</summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Helpers.GedcomTagLevel.Level">
            <summary>Gets or sets the current tag level.</summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Helpers.EnumHelper">
            <summary>
            Enum helper class for parsing an enum.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.Parse``1(System.String)">
            <summary>Parses the specified value.</summary>
            <typeparam name="T">The enum type to parse.</typeparam>
            <param name="value">The text value to parse.</param>
            <returns>The enum equivalent of the passed text.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.Parse``1(System.String,System.Boolean)">
            <summary>Parses the specified value.</summary>
            <typeparam name="T">The enum type to parse.</typeparam>
            <param name="value">The text value to parse.</param>
            <param name="ignoreCase">if set to <c>true</c> the parsing will not be case sensitive.</param>
            <returns>The enum equivalent of the passed text.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.Parse``1(System.String,System.Boolean,``0)">
            <summary>Parses the specified value.</summary>
            <typeparam name="T">The enum type to parse.</typeparam>
            <param name="value">The text value to parse.</param>
            <param name="ignoreCase">if set to <c>true</c> the parsing will not be case sensitive.</param>
            <param name="defaultValue">The default value if all else fails.</param>
            <returns>The enum equivalent of the passed text.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.ParseByDescription``1(System.String,System.Boolean)">
            <summary>Parses a string into an enum by comparing against the description attribute of the enum.</summary>
            <typeparam name="T">The type of the enum to parse to, normally inferred by the compiler.</typeparam>
            <param name="value">The text value to parse.</param>
            <param name="ignoreCase">if set to <c>true</c> the parsing will not be case sensitive.</param>
            <returns>The enum equivalent of the passed text or a default value if parsing does not succeed.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.ParseByDescription``1(System.String,System.Boolean,``0)">
            <summary>Parses a string into an enum by comparing against the description attribute of the enum.</summary>
            <typeparam name="T">The type of the enum to parse to, normally inferred by the compiler.</typeparam>
            <param name="value">The text value to parse.</param>
            <param name="ignoreCase">if set to <c>true</c> the parsing will not be case sensitive.</param>
            <param name="defaultValue">The default value if all else fails.</param>
            <returns>The enum equivalent of the passed text or a default value if parsing does not succeed.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.EnumHelper.ToDescription(System.Enum)">
            <summary>
            Outputs a string version of an enum by using the <see cref="T:System.ComponentModel.DescriptionAttribute"/>  attribute.
            Fails over to the enum name if the <see cref="T:System.ComponentModel.DescriptionAttribute"/> does not exist.
            </summary>
            <param name="e">The enum to output.</param>
            <returns>A string representation of the enum.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.Helpers.IndexedKeyCollection">
            <summary>
            Used to track the cross references that are parsed from the GEDCOM file.
            This seems like quite a complex class and I'd like to see if we can benchmark
            and unit test it.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Helpers.IndexedKeyCollection"/> class.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Helpers.IndexedKeyCollection"/> class.
            </summary>
            <param name="size">The size.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.Strings">
            <summary>
            Gets or sets the strings which form the collection.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.Item(System.String)">
            <summary>
            Gets the <see cref="T:System.String"/> with the specified key from the xref collection.
            </summary>
            <param name="str">The key for looking up the xref.</param>
            <returns>The xref as a string.</returns>
        </member>
        <member name="P:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.Item(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the <see cref="T:System.String" /> with the specified key from the xref collection.
            </summary>
            <param name="str">The key for looking up the xref.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>
            The xref as a string.
            </returns>
            <exception cref="T:System.Exception">ERROR FINDING EXISTING KEY:" + insert.</exception>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Helpers.IndexedKeyCollection.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Finds the specified string.
            </summary>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <param name="pos">The position the string was found at.</param>
            <returns>True if string found, false otherwise.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.GedcomVariation">
            <summary>
            TODO: Doc.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.GedcomVariation"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomVariation.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomVariation.Value">
            <summary>
            Gets or sets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomVariation.VariationType">
            <summary>
            Gets or sets the type of the variation.
            </summary>
            <value>
            The type of the variation.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.GedcomVariation.ChangeDate">
            <summary>
            Gets or sets the change date.
            </summary>
            <value>
            The change date.
            </value>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.CompareTo(GeneGenie.Gedcom.GedcomVariation)">
            <summary>
            Compares the current and passed-in GedcomVariation to see if they are the same.
            </summary>
            <param name="other">The GedcomVariation to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.CompareTo(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>A 32-bit signed integer that indicates whether this instance precedes, follows, or appears in the same position in the sort order as the value parameter.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.Equals(GeneGenie.Gedcom.GedcomVariation)">
            <summary>
            Compares the current and passed-in GedcomVariation to see if they are the same.
            </summary>
            <param name="other">The GedcomVariation to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.Equals(System.Object)">
            <summary>
            Compares the current and passed-in object to see if they are the same.
            </summary>
            <param name="obj">The object to compare the current instance against.</param>
            <returns>True if they match, False otherwise.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:GeneGenie.Gedcom.GedcomVariation.Changed">
            <summary>
            Changeds this instance.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.AnselDecoder">
            <summary>
            Decodes ANSEL characters into Unicode decomposed characters.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselDecoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes and any bytes in the internal buffer.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselDecoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array and any bytes in the internal buffer into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>
            The actual number of characters written into <paramref name="chars" />.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselDecoder.DecodeAnselChar(System.Byte)">
            <summary>
            Decode the ANSEL Code point into the Unicode code point.
            </summary>
            <param name="anselCodePoint">The ansel code point.</param>
            <returns>The Unicode character (or diacritic) mapped from the passed Ansel code point.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.AnselEncoder">
            <summary>
            An encoder/decoder for the the ANSEL/US-MARC character set.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.AnselEncoder.CodePage">
            <summary>
            Gets the code page of ANSEL.
            </summary>
            <returns>The code page identifier of the current <see cref="T:System.Text.Encoding" />.</returns>
            <remarks>
            Windows Latin-1 (close enough!).
            </remarks>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.AnselEncoder.EncodingName">
            <summary>
            Gets the human-readable name of the character set.
            </summary>
            <returns>The human-readable description of the current <see cref="T:System.Text.Encoding" />.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetDecoder">
            <summary>
            Returns a decoder for the ANSEL character set.
            </summary>
            <returns>
            A <see cref="T:System.Text.Decoder" /> that converts an encoded sequence of bytes into a sequence of characters.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetMaxCharCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of characters produced by decoding the specified number of bytes.
            </summary>
            <param name="byteCount">The number of bytes to decode.</param>
            <returns>
            The maximum number of characters produced by decoding the specified number of bytes.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetCharCount(System.Byte[],System.Int32,System.Int32)">
            <summary>
            When overridden in a derived class, calculates the number of characters produced by decoding a sequence of bytes from the specified byte array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="index">The index of the first byte to decode.</param>
            <param name="count">The number of bytes to decode.</param>
            <returns>
            The number of characters produced by decoding the specified sequence of bytes.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)">
            <summary>
            When overridden in a derived class, decodes a sequence of bytes from the specified byte array into the specified character array.
            </summary>
            <param name="bytes">The byte array containing the sequence of bytes to decode.</param>
            <param name="byteIndex">The index of the first byte to decode.</param>
            <param name="byteCount">The number of bytes to decode.</param>
            <param name="chars">The character array to contain the resulting set of characters.</param>
            <param name="charIndex">The index at which to start writing the resulting set of characters.</param>
            <returns>
            The actual number of characters written into <paramref name="chars" />.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetByteCount(System.Char[],System.Int32,System.Int32)">
            <summary>
            Not Implemented.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="index">The index of the first character to encode.</param>
            <param name="count">The number of characters to encode.</param>
            <returns>
            The number of bytes produced by encoding the specified characters.
            </returns>
            <exception cref="T:System.NotImplementedException">This function is not needed and should not be called.</exception>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetMaxByteCount(System.Int32)">
            <summary>
            When overridden in a derived class, calculates the maximum number of bytes produced by encoding the specified number of characters.
            </summary>
            <param name="charCount">The number of characters to encode.</param>
            <returns>
            The maximum number of bytes produced by encoding the specified number of characters.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.AnselEncoder.GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            When overridden in a derived class, encodes a set of characters from the specified character array into the specified byte array.
            </summary>
            <param name="chars">The character array containing the set of characters to encode.</param>
            <param name="charIndex">The index of the first character to encode.</param>
            <param name="charCount">The number of characters to encode.</param>
            <param name="bytes">The byte array to contain the resulting sequence of bytes.</param>
            <param name="byteIndex">The index at which to start writing the resulting sequence of bytes.</param>
            <returns>
            The actual number of bytes written into <paramref name="bytes" />.
            </returns>
            <exception cref="T:System.NotImplementedException">This function is not needed and should not be called.</exception>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomLoader">
            <summary>
            Used by unit tests and benchmarks to load and parse GEDCOM files.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomLoader.LoadAndParse(System.String)">
            <summary>
            Loads the GEDCOM file and parses it.
            </summary>
            <param name="file">The file.</param>
            <returns>The last error during parsing.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomParser">
            <summary>
            GedcomParser is responsible for parsing GEDCOM files.
            This class implements GEDCOM 5.5 grammar rules.
            This is probably not the class you want to use unless writing a
            validator application.  GedcomRecordReader makes use of this
            class for building up a GedcomDatabase.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomParser"/> class.
            </summary>
        </member>
        <member name="E:GeneGenie.Gedcom.Parser.GedcomParser.ParserError">
            <summary>
            Fired if the parser encounters an error.
            </summary>
        </member>
        <member name="E:GeneGenie.Gedcom.Parser.GedcomParser.TagFound">
            <summary>
            Fired whenever a full GEDCOM line has been parsed.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.State">
            <summary>
            Gets the current state the parser is in.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.ErrorState">
            <summary>
            Gets or sets the error state, if any, the parser is in.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.Level">
            <summary>
            Gets the level of the current GEDCOM tag.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.XrefID">
            <summary>
            Gets the Xref of the current GEDCOM tag (if any).
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.Tag">
            <summary>
            Gets the current GEDCOM tag.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.LineValue">
            <summary>
            Gets the value of the current GEDCOM tag, or a pointer to
            another record.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.LineValueType">
            <summary>
            Gets the type of the line value, data or pointer.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.TagCollection">
            <summary>
            Gets or sets the collection of xrefs used in the gedcom file.
            This is used as a cache to lower memory consumption.
            If not set one will be created when parsing.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.XrefCollection">
            <summary>
            Gets or sets the collection of xrefs used in the gedcom file.
            This is used as a cache to lower memory consumption.
            Setting this to an XRefIndexedKeyCollection will
            allow on the fly replacement of xrefs.
            If not set one will be created when parsing.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.Charset">
            <summary>
            Gets or sets the character set used to encode the GEDCOM file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.IgnoreInvalidDelim">
            <summary>
            Gets or sets a value indicating whether invalid delimiters cause errors.
            If set to true invalid GEDCOM files that use multiple spaces
            to separate level / xrefid / tags will be processed without
            generating an error.  royal.ged from Gedcom.pm (http://www.pjcj.net)
            needs this as the tags are indented presumably for readability.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.IgnoreMissingTerms">
            <summary>
            Gets or sets a value indicating whether missing terminators cause an error.
            If set to true GEDCOM lines that do not contain a terminator
            on tags / line values will not cause the parser to generate an error.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.ApplyConcContOnNewLineHack">
            <summary>
            Gets or sets a value indicating whether to leave newlines in.
            Some broken apps (Reunion for instance) omit
            CONT (and maybe CONC) values, leading to broken GEDCOM.
            When set to true the parser will deal with this by converting
            the broken line to another CONC.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.AllowTabs">
            <summary>
            Gets or sets a value indicating whether to allow tabs as OtherChar.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.AllowLineTabs">
            <summary>
            Gets or sets a value indicating whether to allow line tabs as OtherChar.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.AllowInformationSeparatorOne">
            <summary>
            Gets or sets a value indicating whether to allow Information Separator One (0x1f) as OtherChar.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParser.AllowHyphenOrUnderscoreInTag">
            <summary>
            Gets or sets a value indicating whether to allow - or _ in tag names.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParser.GedcomErrorString(GeneGenie.Gedcom.Enums.GedcomErrorState)">
            <summary>
            Obtain a human readable error message for the given error state.
            </summary>
            <param name="state">The error state.</param>
            <returns>A friendlier string for the error.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParser.GedcomParse(System.String)">
            <summary>
            Parses the given data, which should be 1 or more lines, multiple
            calls can be made with multiple lines.
            Events are triggered upon reading a line, or on an error.
            If TagCollection and XrefTagCollection haven't been set
            prior to calling default IndexedKeyCollection objects will be
            used.  To support replacing XRefs you need to set XrefTagCollection
            to an instance of XRefIndexedKeyCollection before calling.
            </summary>
            <param name="data">Data to parse, expected to be unicode.</param>
            <returns>The last error encountered.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParser.ResetParseState">
            <summary>
            Resets the parser states, use this if the same GedcomParser is
            ready to parse a different gedcom file, or if recovering from
            an error the parser has hit.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomParseState">
            <summary>
            GedcomParseState is used to maintain the current parser status
            for GedcomRecordReader.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParseState.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomParseState"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParseState.PreviousTag">
            <summary>
            Gets the previous tag name.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParseState.PreviousLevel">
            <summary>
            Gets the level of the previous tag.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParseState.PreviousTags">
            <summary>
            Gets or sets the stack of previous tag names / levels.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParseState.Records">
            <summary>
            Gets or sets the parse stack of current records, back to the last level 0 record.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomParseState.Database">
            <summary>
            Gets or sets the current database the GedcomRecordReader is working with.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParseState.ParentTag(System.Int32)">
            <summary>
            Obtain the name of the parent GEDCOM tag.
            </summary>
            <param name="level">
            A <see cref="T:System.Int32"/>.  The level of the current tag.
            </param>
            <returns>
            A <see cref="T:System.String"/>.  The name of the parent GEDCOM tag.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomParseState.AddPreviousTag(System.String,System.Int32)">
            <summary>
            Adds the previous tag.
            </summary>
            <param name="name">The name.</param>
            <param name="level">The level.</param>
            <exception cref="T:System.Exception">Only 99 levels supported, as per GEDCOM spec.</exception>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomRecordReader">
            <summary>
            GedcomRecordReader will read in a given gedcom file
            producing a GedcomDatabase and related objects.
            This is generally what you want to use to read in a GEDCOM
            file for manipulation.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordReader.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomRecordReader"/> class.
            Create a GedcomRecordReader for reading a GEDCOM file into a GedcomDatabase.
            </summary>
        </member>
        <member name="E:GeneGenie.Gedcom.Parser.GedcomRecordReader.PercentageDone">
            <summary>
            Fired as each line is parsed from the given file in GedcomRead
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordReader.Parser">
            <summary>
            Gets or sets the parser to be used when reading the GEDCOM file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordReader.GedcomFile">
            <summary>
            Gets or sets the GEDCOM file being read.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordReader.Database">
            <summary>
            Gets the database the records will be added to.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordReader.ReplaceXRefs">
            <summary>
            Gets or sets a value indicating whether xrefs are replaced.
            When reading GEDCOM files into a database the
            xref ids may already exist, settings this to true
            will cause new ids to be generated created for the
            records being read.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordReader.Progress">
            <summary>
            Gets percentage progress of GedcomRead.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordReader.CreateReader(System.String,System.Boolean)">
            <summary>
            A static helper for reading a gedcom file and returning the reader in one go.
            </summary>
            <param name="gedcomFilePath">The gedcom file path.</param>
            <param name="replaceXRefs">The value indicating whether [replace x refs].</param>
            <returns>The reader used to load the file.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordReader.ReadGedcom">
            <summary>
            Starts reading the gedcom file currently set via the GedcomFile property.
            </summary>
            <returns>bool indicating if the file was successfully read.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordReader.ReadGedcom(System.String)">
            <summary>
            Starts reading the specified gedcom file.
            </summary>
            <param name="gedcomFile">Filename to read.</param>
            <returns>bool indicating if the file was successfully read.</returns>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomRecordWriter">
            <summary>
            Used to save a GedcomDatabase to a GEDCOM file.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomRecordWriter"/> class.
            Create a GEDCOM writer for saving a database to a GEDCOM file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.GedcomFile">
            <summary>
            Gets or sets the name of the GEDCOM file being written.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.Database">
            <summary>
            Gets or sets the database for the file being written.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.ApplicationName">
            <summary>
            Gets or sets the name of the application that created the GEDCOM file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.ApplicationVersion">
            <summary>
            Gets or sets the application version that created the GEDCOME file.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.ApplicationSystemId">
            <summary>
            Gets or sets the application system identifier.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.Corporation">
            <summary>
            Gets or sets the owner name for the software that created the GEDCOM.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.CorporationAddress">
            <summary>
            Gets or sets the corporation address.
            </summary>
            <summary>
            The corporation address.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.AllowInformationSeparatorOnSave">
            <summary>
            Gets or sets a value indicating whether to use the information separator when saving.
            </summary>
            <summary>
            <c>true</c> if [allow information separator on save]; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.AllowLineTabsSave">
            <summary>
            Gets or sets a value indicating whether [allow line tabs save].
            </summary>
            <summary>
              <c>true</c> if [allow line tabs save]; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomRecordWriter.AllowTabsSave">
            <summary>
            Gets or sets a value indicating whether [allow tabs save].
            </summary>
            <summary>
              <c>true</c> if [allow tabs save]; otherwise, <c>false</c>.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.OutputGedcom(GeneGenie.Gedcom.GedcomDatabase,System.String)">
            <summary>
            Helper method to output a standard GEDCOM file without needing to create a writer.
            </summary>
            <param name="database">The database to output.</param>
            <param name="file">The file path to output to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.OutputGedcom(GeneGenie.Gedcom.GedcomDatabase,System.IO.Stream)">
            <summary>
            Helper method to output a standard GEDCOM file without needing to create a writer.
            </summary>
            <param name="database">The database to output.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.WriteGedcom">
            <summary>
            Outputs the currently set GedcomDatabase to the currently set file.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.WriteGedcom(GeneGenie.Gedcom.GedcomDatabase,System.String)">
            <summary>
            Outputs a GedcomDatabase to the given file.
            </summary>
            <param name="database">The GedcomDatabase to write.</param>
            <param name="file">The filename to write to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.WriteGedcom(GeneGenie.Gedcom.GedcomDatabase,System.IO.Stream)">
            <summary>
            Outputs a GedcomDatabase to the passed stream.
            </summary>
            <param name="database">The GedcomDatabase to write.</param>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomRecordWriter.Write(GeneGenie.Gedcom.GedcomDatabase,GeneGenie.Gedcom.Parser.GedcomStreamWriter)">
            <summary>
            Writes the specified database to the passed writer.
            Not for use outside this class as the writer must be
            responsibly disposed in a using block by the caller.
            </summary>
            <param name="database">The database to write.</param>
            <param name="writer">The writer to use for outputting the database.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter">
            <summary>
            Stream writer for outputting GEDCOM files. Can be used to output to both memory and files.
            </summary>
            <seealso cref="T:System.IO.StreamWriter" />
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="path">The complete file path to write to. <paramref name="path" /> can be a file name.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.IO.Stream,System.Text.Encoding,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter" /> class.
            </summary>
            <param name="stream">The stream to write to.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
            <param name="leaveOpen">true to leave the stream open after the <see cref="T:System.IO.StreamWriter" /> object is disposed; otherwise, false.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
            <param name="encoding">The character encoding to use.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.#ctor(System.String,System.Boolean,System.Text.Encoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.Parser.GedcomStreamWriter"/> class.
            </summary>
            <param name="path">The complete file path to write to.</param>
            <param name="append">true to append data to the file; false to overwrite the file. If the specified file does not exist, this parameter has no effect, and the constructor creates a new file.</param>
            <param name="encoding">The character encoding to use.</param>
            <param name="bufferSize">The buffer size, in bytes.</param>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomStreamWriter.AllowInformationSeparatorOnSave">
            <summary>
            Gets or sets a value indicating whether to allow the ASCII information separator character to be written.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomStreamWriter.AllowLineTabsSave">
            <summary>
            Gets or sets a value indicating whether to replace line tabs (ASCII vertical tabs) as spaces when written.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.Parser.GedcomStreamWriter.AllowTabsSave">
            <summary>
            Gets or sets a value indicating whether to replace tabs (ASCII horizontal tabs) as spaces when written.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.Char)">
            <summary>
            Writes a character to the stream.
            </summary>
            <param name="value">The character to write to the stream.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters to the stream.
            </summary>
            <param name="buffer">A character array that contains the data to write.</param>
            <param name="index">The character position in the buffer at which to start reading data.</param>
            <param name="count">The maximum number of characters to write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.Object)">
            <summary>
            Writes the text representation of an object to the text string or stream by calling the ToString method on that object.
            </summary>
            <param name="value">The object to write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.String)">
            <summary>
            Writes a string to the stream.
            </summary>
            <param name="value">The string to write to the stream. If <paramref name="value" /> is null, nothing is written.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.String,System.Object)">
            <summary>
            Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The object to format and write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.String,System.Object,System.Object)">
            <summary>
            Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes a formatted string to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.Char)">
            <summary>
            Writes a character followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The character to write to the text stream.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
            <summary>
            Writes a subarray of characters followed by a line terminator to the text string or stream.
            </summary>
            <param name="buffer">The character array from which data is read.</param>
            <param name="index">The character position in <paramref name="buffer" /> at which to start reading data.</param>
            <param name="count">The maximum number of characters to write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.Object)">
            <summary>
            Writes the text representation of an object by calling the ToString method on that object, followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The object to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.String)">
            <summary>
            Writes a string followed by a line terminator to the text string or stream.
            </summary>
            <param name="value">The string to write. If <paramref name="value" /> is null, only the line terminator is written.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.String,System.Object)">
            <summary>
            Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The object to format and write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.String,System.Object,System.Object)">
            <summary>
            Writes a formatted string and a new line to the text string or stream, using the same semantics as the <see cref="M:System.String.Format(System.String,System.Object,System.Object)" /> method.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Parser.GedcomStreamWriter.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>
            Writes out a formatted string and a new line, using the same semantics as <see cref="M:System.String.Format(System.String,System.Object)" />.
            </summary>
            <param name="format">A composite format string (see Remarks).</param>
            <param name="arg0">The first object to format and write.</param>
            <param name="arg1">The second object to format and write.</param>
            <param name="arg2">The third object to format and write.</param>
        </member>
        <member name="T:GeneGenie.Gedcom.Parser.StaticData">
            <summary>
            Lists of error strings etc that don't change.
            </summary>
        </member>
        <member name="F:GeneGenie.Gedcom.Parser.StaticData.ParseErrorDescriptions">
            <summary>
            Descriptions for each parse error.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.SystemTime">
            <summary>
            Used to wrap DateTime.Now() so that it can be replaced for unit testing.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.SystemTime.Now">
            <summary>
            Gets the current time or the time under test for unit tests.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.SystemTime.SetDateTime(System.DateTime)">
            <summary>
            Used to set the time to return when SystemTime.Now() is called.
            </summary>
            <param name="dateTimeNow">The time you want to return for the unit test.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.SystemTime.ResetDateTime">
            <summary>
            Resets SystemTime.Now() to return the real time via DateTime.Now.
            </summary>
        </member>
        <member name="T:GeneGenie.Gedcom.Util">
            <summary>
            TODO: Doc.
            </summary>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.GenerateSoundex(System.String)">
            <summary>
            Generates a soundex string for the passed value.
            </summary>
            <param name="str">The string.</param>
            <returns>A string of characters representing the soundex value.</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.SoundExEncodeChar(System.Char)">
            <summary>
            Encodes the passed character to it's soundex value.
            </summary>
            <param name="c">The c.</param>
            <returns>The soundex character (as a string).</returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.EscapeAtSign(System.String)">
            <summary>
            Escapes "at" sign.
            </summary>
            <param name="str">The string.</param>
            <returns>
            The input string with the @ symbol escaped, or the original string if no @ symbol present.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.EscapedAtLength(System.String)">
            <summary>
            Returns the position of the escaped character in the passed string.
            </summary>
            <param name="str">The string.</param>
            <returns>
            A count of the total number of escaped characters (the "at" sign) found in the passed string, or 0 if none.
            </returns>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.SplitLineText(System.IO.TextWriter,System.String,System.Int32,System.Int32)">
            <summary>
            Splits the line text.
            </summary>
            <param name="sw">The writer.</param>
            <param name="text">The text.</param>
            <param name="level">The level.</param>
            <param name="maxLen">The maximum length.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.SplitLineText(System.IO.TextWriter,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Splits the line text.
            </summary>
            <param name="sw">The writer.</param>
            <param name="text">The text.</param>
            <param name="level">The level.</param>
            <param name="maxLen">The maximum length.</param>
            <param name="maxSplits">The maximum splits.</param>
            <param name="cont">if set to <c>true</c> [cont].</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.SplitText(System.IO.TextWriter,System.String,System.Int32,System.Int32)">
            <summary>
            Splits the text.
            </summary>
            <param name="sw">The writer.</param>
            <param name="line">The line.</param>
            <param name="level">The level.</param>
            <param name="maxLen">The maximum length.</param>
        </member>
        <member name="M:GeneGenie.Gedcom.Util.SplitText(System.IO.TextWriter,System.String,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Splits the text.
            </summary>
            <param name="sw">The writer.</param>
            <param name="line">The line.</param>
            <param name="level">The level.</param>
            <param name="maxLen">The maximum length.</param>
            <param name="maxSplits">The maximum splits.</param>
            <param name="cont">if set to <c>true</c> [cont].</param>
        </member>
        <member name="T:GeneGenie.Gedcom.XRefIndexedKeyCollection">
            <summary>
            TODO: Doc.
            </summary>
            <seealso cref="T:GeneGenie.Gedcom.Helpers.IndexedKeyCollection" />
        </member>
        <member name="M:GeneGenie.Gedcom.XRefIndexedKeyCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:GeneGenie.Gedcom.XRefIndexedKeyCollection"/> class.
            </summary>
        </member>
        <member name="P:GeneGenie.Gedcom.XRefIndexedKeyCollection.Database">
            <summary>
            Gets or sets the database.
            </summary>
            <value>
            The database.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.XRefIndexedKeyCollection.ReplaceXRefs">
            <summary>
            Gets or sets a value indicating whether [replace x refs].
            </summary>
            <value>
              <c>true</c> if [replace x refs]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:GeneGenie.Gedcom.XRefIndexedKeyCollection.Item(System.String,System.Int32,System.Int32)">
            <summary>
            Gets the TODO: Doc.
            </summary>
            <value>
            The <see cref="T:System.String"/>.
            </value>
            <param name="str">The string.</param>
            <param name="startIndex">The start index.</param>
            <param name="length">The length.</param>
            <returns>TODO: Doc.</returns>
        </member>
    </members>
</doc>
